// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package festivosdga.aod_festivos_1_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: AOD_Festivos Purpose: Carga de festivos de Aragón<br>
 * Description: Entrada de datos para carga de festivos de Aragón en la plataforma Open Data. <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status TEST
 */
public class AOD_Festivos implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(databaseAdditionalParams != null){
				
					this.setProperty("databaseAdditionalParams", databaseAdditionalParams.toString());
				
			}
			
			if(databaseConnectionHost != null){
				
					this.setProperty("databaseConnectionHost", databaseConnectionHost.toString());
				
			}
			
			if(databaseConnectionPass != null){
				
					this.setProperty("databaseConnectionPass", databaseConnectionPass.toString());
				
			}
			
			if(databaseConnectionPort != null){
				
					this.setProperty("databaseConnectionPort", databaseConnectionPort.toString());
				
			}
			
			if(databaseConnectionUser != null){
				
					this.setProperty("databaseConnectionUser", databaseConnectionUser.toString());
				
			}
			
			if(databaseName != null){
				
					this.setProperty("databaseName", databaseName.toString());
				
			}
			
			if(databasePath != null){
				
					this.setProperty("databasePath", databasePath.toString());
				
			}
			
			if(databaseQueryOrderBy != null){
				
					this.setProperty("databaseQueryOrderBy", databaseQueryOrderBy.toString());
				
			}
			
			if(databaseQuerySelect != null){
				
					this.setProperty("databaseQuerySelect", databaseQuerySelect.toString());
				
			}
			
			if(databaseTableName_HUE != null){
				
					this.setProperty("databaseTableName_HUE", databaseTableName_HUE.toString());
				
			}
			
			if(databaseTableName_TER != null){
				
					this.setProperty("databaseTableName_TER", databaseTableName_TER.toString());
				
			}
			
			if(databaseTableName_ZGZ != null){
				
					this.setProperty("databaseTableName_ZGZ", databaseTableName_ZGZ.toString());
				
			}
			
			if(docsEncoding != null){
				
					this.setProperty("docsEncoding", docsEncoding.toString());
				
			}
			
			if(inOutXlsSheetName_HUE != null){
				
					this.setProperty("inOutXlsSheetName_HUE", inOutXlsSheetName_HUE.toString());
				
			}
			
			if(inOutXlsSheetName_TER != null){
				
					this.setProperty("inOutXlsSheetName_TER", inOutXlsSheetName_TER.toString());
				
			}
			
			if(inOutXlsSheetName_ZGZ != null){
				
					this.setProperty("inOutXlsSheetName_ZGZ", inOutXlsSheetName_ZGZ.toString());
				
			}
			
			if(inXlsOriginalDocName_HUE != null){
				
					this.setProperty("inXlsOriginalDocName_HUE", inXlsOriginalDocName_HUE.toString());
				
			}
			
			if(inXlsOriginalDocName_TER != null){
				
					this.setProperty("inXlsOriginalDocName_TER", inXlsOriginalDocName_TER.toString());
				
			}
			
			if(inXlsOriginalDocName_ZGZ != null){
				
					this.setProperty("inXlsOriginalDocName_ZGZ", inXlsOriginalDocName_ZGZ.toString());
				
			}
			
			if(inXlsOriginalDocPath_HUE != null){
				
					this.setProperty("inXlsOriginalDocPath_HUE", inXlsOriginalDocPath_HUE.toString());
				
			}
			
			if(inXlsOriginalDocPath_TER != null){
				
					this.setProperty("inXlsOriginalDocPath_TER", inXlsOriginalDocPath_TER.toString());
				
			}
			
			if(inXlsOriginalDocPath_ZGZ != null){
				
					this.setProperty("inXlsOriginalDocPath_ZGZ", inXlsOriginalDocPath_ZGZ.toString());
				
			}
			
			if(inXlsUpdateDocName_HUE != null){
				
					this.setProperty("inXlsUpdateDocName_HUE", inXlsUpdateDocName_HUE.toString());
				
			}
			
			if(inXlsUpdateDocName_TER != null){
				
					this.setProperty("inXlsUpdateDocName_TER", inXlsUpdateDocName_TER.toString());
				
			}
			
			if(inXlsUpdateDocName_ZGZ != null){
				
					this.setProperty("inXlsUpdateDocName_ZGZ", inXlsUpdateDocName_ZGZ.toString());
				
			}
			
			if(inXlsUpdateDocPath_HUE != null){
				
					this.setProperty("inXlsUpdateDocPath_HUE", inXlsUpdateDocPath_HUE.toString());
				
			}
			
			if(inXlsUpdateDocPath_TER != null){
				
					this.setProperty("inXlsUpdateDocPath_TER", inXlsUpdateDocPath_TER.toString());
				
			}
			
			if(inXlsUpdateDocPath_ZGZ != null){
				
					this.setProperty("inXlsUpdateDocPath_ZGZ", inXlsUpdateDocPath_ZGZ.toString());
				
			}
			
			if(logConfigFile != null){
				
					this.setProperty("logConfigFile", logConfigFile.toString());
				
			}
			
			if(logOutFile != null){
				
					this.setProperty("logOutFile", logOutFile.toString());
				
			}
			
			if(logOutPath != null){
				
					this.setProperty("logOutPath", logOutPath.toString());
				
			}
			
			if(outCsvDocName_HUE != null){
				
					this.setProperty("outCsvDocName_HUE", outCsvDocName_HUE.toString());
				
			}
			
			if(outCsvDocName_TER != null){
				
					this.setProperty("outCsvDocName_TER", outCsvDocName_TER.toString());
				
			}
			
			if(outCsvDocName_ZGZ != null){
				
					this.setProperty("outCsvDocName_ZGZ", outCsvDocName_ZGZ.toString());
				
			}
			
			if(outDocsPath_HUE != null){
				
					this.setProperty("outDocsPath_HUE", outDocsPath_HUE.toString());
				
			}
			
			if(outDocsPath_TER != null){
				
					this.setProperty("outDocsPath_TER", outDocsPath_TER.toString());
				
			}
			
			if(outDocsPath_ZGZ != null){
				
					this.setProperty("outDocsPath_ZGZ", outDocsPath_ZGZ.toString());
				
			}
			
			if(outIcsDocHeaderPropertyProdId_HUE != null){
				
					this.setProperty("outIcsDocHeaderPropertyProdId_HUE", outIcsDocHeaderPropertyProdId_HUE.toString());
				
			}
			
			if(outIcsDocHeaderPropertyProdId_TER != null){
				
					this.setProperty("outIcsDocHeaderPropertyProdId_TER", outIcsDocHeaderPropertyProdId_TER.toString());
				
			}
			
			if(outIcsDocHeaderPropertyProdId_ZGZ != null){
				
					this.setProperty("outIcsDocHeaderPropertyProdId_ZGZ", outIcsDocHeaderPropertyProdId_ZGZ.toString());
				
			}
			
			if(outIcsDocName_HUE != null){
				
					this.setProperty("outIcsDocName_HUE", outIcsDocName_HUE.toString());
				
			}
			
			if(outIcsDocName_TER != null){
				
					this.setProperty("outIcsDocName_TER", outIcsDocName_TER.toString());
				
			}
			
			if(outIcsDocName_ZGZ != null){
				
					this.setProperty("outIcsDocName_ZGZ", outIcsDocName_ZGZ.toString());
				
			}
			
			if(outJsonDocDataBlock_HUE != null){
				
					this.setProperty("outJsonDocDataBlock_HUE", outJsonDocDataBlock_HUE.toString());
				
			}
			
			if(outJsonDocDataBlock_TER != null){
				
					this.setProperty("outJsonDocDataBlock_TER", outJsonDocDataBlock_TER.toString());
				
			}
			
			if(outJsonDocDataBlock_ZGZ != null){
				
					this.setProperty("outJsonDocDataBlock_ZGZ", outJsonDocDataBlock_ZGZ.toString());
				
			}
			
			if(outJsonDocName_HUE != null){
				
					this.setProperty("outJsonDocName_HUE", outJsonDocName_HUE.toString());
				
			}
			
			if(outJsonDocName_TER != null){
				
					this.setProperty("outJsonDocName_TER", outJsonDocName_TER.toString());
				
			}
			
			if(outJsonDocName_ZGZ != null){
				
					this.setProperty("outJsonDocName_ZGZ", outJsonDocName_ZGZ.toString());
				
			}
			
			if(outXlsDocName_HUE != null){
				
					this.setProperty("outXlsDocName_HUE", outXlsDocName_HUE.toString());
				
			}
			
			if(outXlsDocName_TER != null){
				
					this.setProperty("outXlsDocName_TER", outXlsDocName_TER.toString());
				
			}
			
			if(outXlsDocName_ZGZ != null){
				
					this.setProperty("outXlsDocName_ZGZ", outXlsDocName_ZGZ.toString());
				
			}
			
			if(outXmlDocName_HUE != null){
				
					this.setProperty("outXmlDocName_HUE", outXmlDocName_HUE.toString());
				
			}
			
			if(outXmlDocName_TER != null){
				
					this.setProperty("outXmlDocName_TER", outXmlDocName_TER.toString());
				
			}
			
			if(outXmlDocName_ZGZ != null){
				
					this.setProperty("outXmlDocName_ZGZ", outXmlDocName_ZGZ.toString());
				
			}
			
			if(outXmlDocRootTag_HUE != null){
				
					this.setProperty("outXmlDocRootTag_HUE", outXmlDocRootTag_HUE.toString());
				
			}
			
			if(outXmlDocRootTag_TER != null){
				
					this.setProperty("outXmlDocRootTag_TER", outXmlDocRootTag_TER.toString());
				
			}
			
			if(outXmlDocRootTag_ZGZ != null){
				
					this.setProperty("outXmlDocRootTag_ZGZ", outXmlDocRootTag_ZGZ.toString());
				
			}
			
			if(outXmlDocRowTag != null){
				
					this.setProperty("outXmlDocRowTag", outXmlDocRowTag.toString());
				
			}
			
			if(databaseTableName != null){
				
					this.setProperty("databaseTableName", databaseTableName.toString());
				
			}
			
			if(etlConfName != null){
				
					this.setProperty("etlConfName", etlConfName.toString());
				
			}
			
			if(etlConfPath != null){
				
					this.setProperty("etlConfPath", etlConfPath.toString());
				
			}
			
			if(inOutXlsSheetName != null){
				
					this.setProperty("inOutXlsSheetName", inOutXlsSheetName.toString());
				
			}
			
			if(inXlsOriginalDocName != null){
				
					this.setProperty("inXlsOriginalDocName", inXlsOriginalDocName.toString());
				
			}
			
			if(inXlsOriginalDocPath != null){
				
					this.setProperty("inXlsOriginalDocPath", inXlsOriginalDocPath.toString());
				
			}
			
			if(inXlsUpdateDocName != null){
				
					this.setProperty("inXlsUpdateDocName", inXlsUpdateDocName.toString());
				
			}
			
			if(inXlsUpdateDocPath != null){
				
					this.setProperty("inXlsUpdateDocPath", inXlsUpdateDocPath.toString());
				
			}
			
			if(outCsvDocName != null){
				
					this.setProperty("outCsvDocName", outCsvDocName.toString());
				
			}
			
			if(outDocsPath != null){
				
					this.setProperty("outDocsPath", outDocsPath.toString());
				
			}
			
			if(outIcsDocHeaderPropertyProdId != null){
				
					this.setProperty("outIcsDocHeaderPropertyProdId", outIcsDocHeaderPropertyProdId.toString());
				
			}
			
			if(outIcsDocName != null){
				
					this.setProperty("outIcsDocName", outIcsDocName.toString());
				
			}
			
			if(outJsonDocDataBlock != null){
				
					this.setProperty("outJsonDocDataBlock", outJsonDocDataBlock.toString());
				
			}
			
			if(outJsonDocName != null){
				
					this.setProperty("outJsonDocName", outJsonDocName.toString());
				
			}
			
			if(outXlsDocName != null){
				
					this.setProperty("outXlsDocName", outXlsDocName.toString());
				
			}
			
			if(outXmlDocName != null){
				
					this.setProperty("outXmlDocName", outXmlDocName.toString());
				
			}
			
			if(outXmlDocRootTag != null){
				
					this.setProperty("outXmlDocRootTag", outXmlDocRootTag.toString());
				
			}
			
			if(provincesToLoad != null){
				
					this.setProperty("provincesToLoad", provincesToLoad.toString());
				
			}
			
		}

public String databaseAdditionalParams;
public String getDatabaseAdditionalParams(){
	return this.databaseAdditionalParams;
}
public String databaseConnectionHost;
public String getDatabaseConnectionHost(){
	return this.databaseConnectionHost;
}
public String databaseConnectionPass;
public String getDatabaseConnectionPass(){
	return this.databaseConnectionPass;
}
public String databaseConnectionPort;
public String getDatabaseConnectionPort(){
	return this.databaseConnectionPort;
}
public String databaseConnectionUser;
public String getDatabaseConnectionUser(){
	return this.databaseConnectionUser;
}
public String databaseName;
public String getDatabaseName(){
	return this.databaseName;
}
public String databasePath;
public String getDatabasePath(){
	return this.databasePath;
}
public String databaseQueryOrderBy;
public String getDatabaseQueryOrderBy(){
	return this.databaseQueryOrderBy;
}
public String databaseQuerySelect;
public String getDatabaseQuerySelect(){
	return this.databaseQuerySelect;
}
public String databaseTableName_HUE;
public String getDatabaseTableName_HUE(){
	return this.databaseTableName_HUE;
}
public String databaseTableName_TER;
public String getDatabaseTableName_TER(){
	return this.databaseTableName_TER;
}
public String databaseTableName_ZGZ;
public String getDatabaseTableName_ZGZ(){
	return this.databaseTableName_ZGZ;
}
public String docsEncoding;
public String getDocsEncoding(){
	return this.docsEncoding;
}
public String inOutXlsSheetName_HUE;
public String getInOutXlsSheetName_HUE(){
	return this.inOutXlsSheetName_HUE;
}
public String inOutXlsSheetName_TER;
public String getInOutXlsSheetName_TER(){
	return this.inOutXlsSheetName_TER;
}
public String inOutXlsSheetName_ZGZ;
public String getInOutXlsSheetName_ZGZ(){
	return this.inOutXlsSheetName_ZGZ;
}
public String inXlsOriginalDocName_HUE;
public String getInXlsOriginalDocName_HUE(){
	return this.inXlsOriginalDocName_HUE;
}
public String inXlsOriginalDocName_TER;
public String getInXlsOriginalDocName_TER(){
	return this.inXlsOriginalDocName_TER;
}
public String inXlsOriginalDocName_ZGZ;
public String getInXlsOriginalDocName_ZGZ(){
	return this.inXlsOriginalDocName_ZGZ;
}
public String inXlsOriginalDocPath_HUE;
public String getInXlsOriginalDocPath_HUE(){
	return this.inXlsOriginalDocPath_HUE;
}
public String inXlsOriginalDocPath_TER;
public String getInXlsOriginalDocPath_TER(){
	return this.inXlsOriginalDocPath_TER;
}
public String inXlsOriginalDocPath_ZGZ;
public String getInXlsOriginalDocPath_ZGZ(){
	return this.inXlsOriginalDocPath_ZGZ;
}
public String inXlsUpdateDocName_HUE;
public String getInXlsUpdateDocName_HUE(){
	return this.inXlsUpdateDocName_HUE;
}
public String inXlsUpdateDocName_TER;
public String getInXlsUpdateDocName_TER(){
	return this.inXlsUpdateDocName_TER;
}
public String inXlsUpdateDocName_ZGZ;
public String getInXlsUpdateDocName_ZGZ(){
	return this.inXlsUpdateDocName_ZGZ;
}
public String inXlsUpdateDocPath_HUE;
public String getInXlsUpdateDocPath_HUE(){
	return this.inXlsUpdateDocPath_HUE;
}
public String inXlsUpdateDocPath_TER;
public String getInXlsUpdateDocPath_TER(){
	return this.inXlsUpdateDocPath_TER;
}
public String inXlsUpdateDocPath_ZGZ;
public String getInXlsUpdateDocPath_ZGZ(){
	return this.inXlsUpdateDocPath_ZGZ;
}
public String logConfigFile;
public String getLogConfigFile(){
	return this.logConfigFile;
}
public String logOutFile;
public String getLogOutFile(){
	return this.logOutFile;
}
public String logOutPath;
public String getLogOutPath(){
	return this.logOutPath;
}
public String outCsvDocName_HUE;
public String getOutCsvDocName_HUE(){
	return this.outCsvDocName_HUE;
}
public String outCsvDocName_TER;
public String getOutCsvDocName_TER(){
	return this.outCsvDocName_TER;
}
public String outCsvDocName_ZGZ;
public String getOutCsvDocName_ZGZ(){
	return this.outCsvDocName_ZGZ;
}
public String outDocsPath_HUE;
public String getOutDocsPath_HUE(){
	return this.outDocsPath_HUE;
}
public String outDocsPath_TER;
public String getOutDocsPath_TER(){
	return this.outDocsPath_TER;
}
public String outDocsPath_ZGZ;
public String getOutDocsPath_ZGZ(){
	return this.outDocsPath_ZGZ;
}
public String outIcsDocHeaderPropertyProdId_HUE;
public String getOutIcsDocHeaderPropertyProdId_HUE(){
	return this.outIcsDocHeaderPropertyProdId_HUE;
}
public String outIcsDocHeaderPropertyProdId_TER;
public String getOutIcsDocHeaderPropertyProdId_TER(){
	return this.outIcsDocHeaderPropertyProdId_TER;
}
public String outIcsDocHeaderPropertyProdId_ZGZ;
public String getOutIcsDocHeaderPropertyProdId_ZGZ(){
	return this.outIcsDocHeaderPropertyProdId_ZGZ;
}
public String outIcsDocName_HUE;
public String getOutIcsDocName_HUE(){
	return this.outIcsDocName_HUE;
}
public String outIcsDocName_TER;
public String getOutIcsDocName_TER(){
	return this.outIcsDocName_TER;
}
public String outIcsDocName_ZGZ;
public String getOutIcsDocName_ZGZ(){
	return this.outIcsDocName_ZGZ;
}
public String outJsonDocDataBlock_HUE;
public String getOutJsonDocDataBlock_HUE(){
	return this.outJsonDocDataBlock_HUE;
}
public String outJsonDocDataBlock_TER;
public String getOutJsonDocDataBlock_TER(){
	return this.outJsonDocDataBlock_TER;
}
public String outJsonDocDataBlock_ZGZ;
public String getOutJsonDocDataBlock_ZGZ(){
	return this.outJsonDocDataBlock_ZGZ;
}
public String outJsonDocName_HUE;
public String getOutJsonDocName_HUE(){
	return this.outJsonDocName_HUE;
}
public String outJsonDocName_TER;
public String getOutJsonDocName_TER(){
	return this.outJsonDocName_TER;
}
public String outJsonDocName_ZGZ;
public String getOutJsonDocName_ZGZ(){
	return this.outJsonDocName_ZGZ;
}
public String outXlsDocName_HUE;
public String getOutXlsDocName_HUE(){
	return this.outXlsDocName_HUE;
}
public String outXlsDocName_TER;
public String getOutXlsDocName_TER(){
	return this.outXlsDocName_TER;
}
public String outXlsDocName_ZGZ;
public String getOutXlsDocName_ZGZ(){
	return this.outXlsDocName_ZGZ;
}
public String outXmlDocName_HUE;
public String getOutXmlDocName_HUE(){
	return this.outXmlDocName_HUE;
}
public String outXmlDocName_TER;
public String getOutXmlDocName_TER(){
	return this.outXmlDocName_TER;
}
public String outXmlDocName_ZGZ;
public String getOutXmlDocName_ZGZ(){
	return this.outXmlDocName_ZGZ;
}
public String outXmlDocRootTag_HUE;
public String getOutXmlDocRootTag_HUE(){
	return this.outXmlDocRootTag_HUE;
}
public String outXmlDocRootTag_TER;
public String getOutXmlDocRootTag_TER(){
	return this.outXmlDocRootTag_TER;
}
public String outXmlDocRootTag_ZGZ;
public String getOutXmlDocRootTag_ZGZ(){
	return this.outXmlDocRootTag_ZGZ;
}
public String outXmlDocRowTag;
public String getOutXmlDocRowTag(){
	return this.outXmlDocRowTag;
}
public String databaseTableName;
public String getDatabaseTableName(){
	return this.databaseTableName;
}
public String etlConfName;
public String getEtlConfName(){
	return this.etlConfName;
}
public String etlConfPath;
public String getEtlConfPath(){
	return this.etlConfPath;
}
public String inOutXlsSheetName;
public String getInOutXlsSheetName(){
	return this.inOutXlsSheetName;
}
public String inXlsOriginalDocName;
public String getInXlsOriginalDocName(){
	return this.inXlsOriginalDocName;
}
public String inXlsOriginalDocPath;
public String getInXlsOriginalDocPath(){
	return this.inXlsOriginalDocPath;
}
public String inXlsUpdateDocName;
public String getInXlsUpdateDocName(){
	return this.inXlsUpdateDocName;
}
public String inXlsUpdateDocPath;
public String getInXlsUpdateDocPath(){
	return this.inXlsUpdateDocPath;
}
public String outCsvDocName;
public String getOutCsvDocName(){
	return this.outCsvDocName;
}
public String outDocsPath;
public String getOutDocsPath(){
	return this.outDocsPath;
}
public String outIcsDocHeaderPropertyProdId;
public String getOutIcsDocHeaderPropertyProdId(){
	return this.outIcsDocHeaderPropertyProdId;
}
public String outIcsDocName;
public String getOutIcsDocName(){
	return this.outIcsDocName;
}
public String outJsonDocDataBlock;
public String getOutJsonDocDataBlock(){
	return this.outJsonDocDataBlock;
}
public String outJsonDocName;
public String getOutJsonDocName(){
	return this.outJsonDocName;
}
public String outXlsDocName;
public String getOutXlsDocName(){
	return this.outXlsDocName;
}
public String outXmlDocName;
public String getOutXmlDocName(){
	return this.outXmlDocName;
}
public String outXmlDocRootTag;
public String getOutXmlDocRootTag(){
	return this.outXmlDocRootTag;
}
public String provincesToLoad;
public String getProvincesToLoad(){
	return this.provincesToLoad;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "1.0";
	private final String jobName = "AOD_Festivos";
	private final String projectName = "FESTIVOSDGA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				AOD_Festivos.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(AOD_Festivos.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_FESTIVOSDGA_AOD_Festivos = new byte[0];
    static byte[] commonByteArray_FESTIVOSDGA_AOD_Festivos = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FESTIVOSDGA_AOD_Festivos.length) {
				if(length < 1024 && commonByteArray_FESTIVOSDGA_AOD_Festivos.length == 0) {
   					commonByteArray_FESTIVOSDGA_AOD_Festivos = new byte[1024];
				} else {
   					commonByteArray_FESTIVOSDGA_AOD_Festivos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FESTIVOSDGA_AOD_Festivos, 0, length);
			strReturn = new String(commonByteArray_FESTIVOSDGA_AOD_Festivos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FESTIVOSDGA_AOD_Festivos) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
    	class BytesLimit65535_tContextLoad_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_1().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"=").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)"=").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\r\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\r\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */context.etlConfPath + context.etlConfName/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"ISO-8859-15")), fieldSeparator_tFileInputDelimited_1[0]);
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	            				//?????doesn't work for other escapeChar
	            				//the default escape mode is double escape
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 0; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
								rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
								if(!(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
		        		}else{
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"ISO-8859-15")), fieldSeparator_tFileInputDelimited_1[0]);
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	        				//?????doesn't work for other escapeChar
	        				//the default escape mode is double escape
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 0;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
	        	
					
	        			if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"=").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)"=").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1.key = null;
					
							row1.value = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
								
							rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]=rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].trim();			
							
									row1.key = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.key = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
								
							rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]=rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].trim();			
							
									row1.value = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.value = null;
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (row1.key != null){
                          tmp_key_tContextLoad_1 = row1.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          row1.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(row1.key != null) {
                    key_tContextLoad_1 =
                        row1.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(row1.value != null) {
                    value_tContextLoad_1 =
                        row1.value;
                        }

                        System.out.println("tContextLoad_1 set key \"" + key_tContextLoad_1 + "\" with value \"" + value_tContextLoad_1 + "\"");
  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "databaseAdditionalParams".equals(key_tContextLoad_1))
        {
           context.databaseAdditionalParams=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "databaseConnectionHost".equals(key_tContextLoad_1))
        {
           context.databaseConnectionHost=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "databaseConnectionPass".equals(key_tContextLoad_1))
        {
           context.databaseConnectionPass=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "databaseConnectionPort".equals(key_tContextLoad_1))
        {
           context.databaseConnectionPort=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "databaseConnectionUser".equals(key_tContextLoad_1))
        {
           context.databaseConnectionUser=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "databaseName".equals(key_tContextLoad_1))
        {
           context.databaseName=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "databasePath".equals(key_tContextLoad_1))
        {
           context.databasePath=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "databaseQueryOrderBy".equals(key_tContextLoad_1))
        {
           context.databaseQueryOrderBy=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "databaseQuerySelect".equals(key_tContextLoad_1))
        {
           context.databaseQuerySelect=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "databaseTableName_HUE".equals(key_tContextLoad_1))
        {
           context.databaseTableName_HUE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "databaseTableName_TER".equals(key_tContextLoad_1))
        {
           context.databaseTableName_TER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "databaseTableName_ZGZ".equals(key_tContextLoad_1))
        {
           context.databaseTableName_ZGZ=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "docsEncoding".equals(key_tContextLoad_1))
        {
           context.docsEncoding=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inOutXlsSheetName_HUE".equals(key_tContextLoad_1))
        {
           context.inOutXlsSheetName_HUE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inOutXlsSheetName_TER".equals(key_tContextLoad_1))
        {
           context.inOutXlsSheetName_TER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inOutXlsSheetName_ZGZ".equals(key_tContextLoad_1))
        {
           context.inOutXlsSheetName_ZGZ=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inXlsOriginalDocName_HUE".equals(key_tContextLoad_1))
        {
           context.inXlsOriginalDocName_HUE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inXlsOriginalDocName_TER".equals(key_tContextLoad_1))
        {
           context.inXlsOriginalDocName_TER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inXlsOriginalDocName_ZGZ".equals(key_tContextLoad_1))
        {
           context.inXlsOriginalDocName_ZGZ=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inXlsOriginalDocPath_HUE".equals(key_tContextLoad_1))
        {
           context.inXlsOriginalDocPath_HUE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inXlsOriginalDocPath_TER".equals(key_tContextLoad_1))
        {
           context.inXlsOriginalDocPath_TER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inXlsOriginalDocPath_ZGZ".equals(key_tContextLoad_1))
        {
           context.inXlsOriginalDocPath_ZGZ=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inXlsUpdateDocName_HUE".equals(key_tContextLoad_1))
        {
           context.inXlsUpdateDocName_HUE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inXlsUpdateDocName_TER".equals(key_tContextLoad_1))
        {
           context.inXlsUpdateDocName_TER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inXlsUpdateDocName_ZGZ".equals(key_tContextLoad_1))
        {
           context.inXlsUpdateDocName_ZGZ=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inXlsUpdateDocPath_HUE".equals(key_tContextLoad_1))
        {
           context.inXlsUpdateDocPath_HUE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inXlsUpdateDocPath_TER".equals(key_tContextLoad_1))
        {
           context.inXlsUpdateDocPath_TER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inXlsUpdateDocPath_ZGZ".equals(key_tContextLoad_1))
        {
           context.inXlsUpdateDocPath_ZGZ=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "logConfigFile".equals(key_tContextLoad_1))
        {
           context.logConfigFile=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "logOutFile".equals(key_tContextLoad_1))
        {
           context.logOutFile=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "logOutPath".equals(key_tContextLoad_1))
        {
           context.logOutPath=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outCsvDocName_HUE".equals(key_tContextLoad_1))
        {
           context.outCsvDocName_HUE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outCsvDocName_TER".equals(key_tContextLoad_1))
        {
           context.outCsvDocName_TER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outCsvDocName_ZGZ".equals(key_tContextLoad_1))
        {
           context.outCsvDocName_ZGZ=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outDocsPath_HUE".equals(key_tContextLoad_1))
        {
           context.outDocsPath_HUE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outDocsPath_TER".equals(key_tContextLoad_1))
        {
           context.outDocsPath_TER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outDocsPath_ZGZ".equals(key_tContextLoad_1))
        {
           context.outDocsPath_ZGZ=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outIcsDocHeaderPropertyProdId_HUE".equals(key_tContextLoad_1))
        {
           context.outIcsDocHeaderPropertyProdId_HUE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outIcsDocHeaderPropertyProdId_TER".equals(key_tContextLoad_1))
        {
           context.outIcsDocHeaderPropertyProdId_TER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outIcsDocHeaderPropertyProdId_ZGZ".equals(key_tContextLoad_1))
        {
           context.outIcsDocHeaderPropertyProdId_ZGZ=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outIcsDocName_HUE".equals(key_tContextLoad_1))
        {
           context.outIcsDocName_HUE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outIcsDocName_TER".equals(key_tContextLoad_1))
        {
           context.outIcsDocName_TER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outIcsDocName_ZGZ".equals(key_tContextLoad_1))
        {
           context.outIcsDocName_ZGZ=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outJsonDocDataBlock_HUE".equals(key_tContextLoad_1))
        {
           context.outJsonDocDataBlock_HUE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outJsonDocDataBlock_TER".equals(key_tContextLoad_1))
        {
           context.outJsonDocDataBlock_TER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outJsonDocDataBlock_ZGZ".equals(key_tContextLoad_1))
        {
           context.outJsonDocDataBlock_ZGZ=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outJsonDocName_HUE".equals(key_tContextLoad_1))
        {
           context.outJsonDocName_HUE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outJsonDocName_TER".equals(key_tContextLoad_1))
        {
           context.outJsonDocName_TER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outJsonDocName_ZGZ".equals(key_tContextLoad_1))
        {
           context.outJsonDocName_ZGZ=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outXlsDocName_HUE".equals(key_tContextLoad_1))
        {
           context.outXlsDocName_HUE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outXlsDocName_TER".equals(key_tContextLoad_1))
        {
           context.outXlsDocName_TER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outXlsDocName_ZGZ".equals(key_tContextLoad_1))
        {
           context.outXlsDocName_ZGZ=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outXmlDocName_HUE".equals(key_tContextLoad_1))
        {
           context.outXmlDocName_HUE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outXmlDocName_TER".equals(key_tContextLoad_1))
        {
           context.outXmlDocName_TER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outXmlDocName_ZGZ".equals(key_tContextLoad_1))
        {
           context.outXmlDocName_ZGZ=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outXmlDocRootTag_HUE".equals(key_tContextLoad_1))
        {
           context.outXmlDocRootTag_HUE=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outXmlDocRootTag_TER".equals(key_tContextLoad_1))
        {
           context.outXmlDocRootTag_TER=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outXmlDocRootTag_ZGZ".equals(key_tContextLoad_1))
        {
           context.outXmlDocRootTag_ZGZ=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outXmlDocRowTag".equals(key_tContextLoad_1))
        {
           context.outXmlDocRowTag=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "databaseTableName".equals(key_tContextLoad_1))
        {
           context.databaseTableName=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "etlConfName".equals(key_tContextLoad_1))
        {
           context.etlConfName=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "etlConfPath".equals(key_tContextLoad_1))
        {
           context.etlConfPath=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inOutXlsSheetName".equals(key_tContextLoad_1))
        {
           context.inOutXlsSheetName=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inXlsOriginalDocName".equals(key_tContextLoad_1))
        {
           context.inXlsOriginalDocName=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inXlsOriginalDocPath".equals(key_tContextLoad_1))
        {
           context.inXlsOriginalDocPath=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inXlsUpdateDocName".equals(key_tContextLoad_1))
        {
           context.inXlsUpdateDocName=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "inXlsUpdateDocPath".equals(key_tContextLoad_1))
        {
           context.inXlsUpdateDocPath=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outCsvDocName".equals(key_tContextLoad_1))
        {
           context.outCsvDocName=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outDocsPath".equals(key_tContextLoad_1))
        {
           context.outDocsPath=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outIcsDocHeaderPropertyProdId".equals(key_tContextLoad_1))
        {
           context.outIcsDocHeaderPropertyProdId=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outIcsDocName".equals(key_tContextLoad_1))
        {
           context.outIcsDocName=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outJsonDocDataBlock".equals(key_tContextLoad_1))
        {
           context.outJsonDocDataBlock=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outJsonDocName".equals(key_tContextLoad_1))
        {
           context.outJsonDocName=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outXlsDocName".equals(key_tContextLoad_1))
        {
           context.outXlsDocName=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outXmlDocName".equals(key_tContextLoad_1))
        {
           context.outXmlDocName=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "outXmlDocRootTag".equals(key_tContextLoad_1))
        {
           context.outXmlDocRootTag=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "provincesToLoad".equals(key_tContextLoad_1))
        {
           context.provincesToLoad=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    }
	for(Object obj_tContextLoad_1 :newPropertyList_tContextLoad_1){
		
		System.out.println("Info: Parameter \"" + obj_tContextLoad_1 + "\" is a new parameter of tContextLoad_1");        
	}
	for(Object obj_tContextLoad_1 :noAssignList_tContextLoad_1){
		
		System.out.println("Info: Parameter \"" + obj_tContextLoad_1 + "\" has not been set by tContextLoad_1");
		
	} 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());

   			if (context.provincesToLoad != null && ("".equals(context.provincesToLoad) || ("ALL".equals(context.provincesToLoad)) || (!"".equals(context.provincesToLoad) && context.provincesToLoad.contains("ZGZ")))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				
    			tJava_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}
   			if (context.provincesToLoad != null && ("".equals(context.provincesToLoad) || ("ALL".equals(context.provincesToLoad)) || (!"".equals(context.provincesToLoad) && context.provincesToLoad.contains("HUE")))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				
    			tJava_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}
   			if (context.provincesToLoad != null && ("".equals(context.provincesToLoad) || ("ALL".equals(context.provincesToLoad)) || (!"".equals(context.provincesToLoad) && context.provincesToLoad.contains("TER")))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				
    			tJava_3Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_FESTIVOSDGA_AOD_Festivos = new byte[0];
    static byte[] commonByteArray_FESTIVOSDGA_AOD_Festivos = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FESTIVOSDGA_AOD_Festivos.length) {
				if(length < 1024 && commonByteArray_FESTIVOSDGA_AOD_Festivos.length == 0) {
   					commonByteArray_FESTIVOSDGA_AOD_Festivos = new byte[1024];
				} else {
   					commonByteArray_FESTIVOSDGA_AOD_Festivos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FESTIVOSDGA_AOD_Festivos, 0, length);
			strReturn = new String(commonByteArray_FESTIVOSDGA_AOD_Festivos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FESTIVOSDGA_AOD_Festivos) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRunJob_1 = 0;
		
    	class BytesLimit65535_tRunJob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_1().limitLog4jByte();


 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		
    	class BytesLimit65535_tJava_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_1().limitLog4jByte();


context.databaseTableName = context.databaseTableName_ZGZ;
context.inXlsOriginalDocName = context.inXlsOriginalDocName_ZGZ;
context.inXlsUpdateDocName = context.inXlsUpdateDocName_ZGZ;
context.inOutXlsSheetName = context.inOutXlsSheetName_ZGZ;
context.outXlsDocName = context.outXlsDocName_ZGZ;
context.outCsvDocName = context.outCsvDocName_ZGZ;
context.outJsonDocDataBlock = context.outJsonDocDataBlock_ZGZ;
context.outJsonDocName = context.outJsonDocName_ZGZ;
context.outXmlDocRootTag = context.outXmlDocRootTag_ZGZ;
context.outXmlDocName = context.outXmlDocName_ZGZ;
context.outIcsDocHeaderPropertyProdId = context.outIcsDocHeaderPropertyProdId_ZGZ;
context.outIcsDocName = context.outIcsDocName_ZGZ;
context.inXlsOriginalDocPath = context.inXlsOriginalDocPath_ZGZ;
context.inXlsUpdateDocPath = context.inXlsUpdateDocPath_ZGZ;
context.outDocsPath = context.outDocsPath_ZGZ;
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Server");
	      			
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	 
	java.util.List<String> paraListForLog_tRunJob_1 = new java.util.ArrayList<String>();
	paraListForLog_tRunJob_1.addAll(paraList_tRunJob_1);
	List<String> parametersToEncrypt_tRunJob_1 = new java.util.ArrayList<String>();
	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_1.put("databaseAdditionalParams", context.databaseAdditionalParams);
		
			parentContextMap_tRunJob_1.put("databaseConnectionHost", context.databaseConnectionHost);
		
			parentContextMap_tRunJob_1.put("databaseConnectionPass", context.databaseConnectionPass);
		
			parentContextMap_tRunJob_1.put("databaseConnectionPort", context.databaseConnectionPort);
		
			parentContextMap_tRunJob_1.put("databaseConnectionUser", context.databaseConnectionUser);
		
			parentContextMap_tRunJob_1.put("databaseName", context.databaseName);
		
			parentContextMap_tRunJob_1.put("databasePath", context.databasePath);
		
			parentContextMap_tRunJob_1.put("databaseQueryOrderBy", context.databaseQueryOrderBy);
		
			parentContextMap_tRunJob_1.put("databaseQuerySelect", context.databaseQuerySelect);
		
			parentContextMap_tRunJob_1.put("databaseTableName_HUE", context.databaseTableName_HUE);
		
			parentContextMap_tRunJob_1.put("databaseTableName_TER", context.databaseTableName_TER);
		
			parentContextMap_tRunJob_1.put("databaseTableName_ZGZ", context.databaseTableName_ZGZ);
		
			parentContextMap_tRunJob_1.put("docsEncoding", context.docsEncoding);
		
			parentContextMap_tRunJob_1.put("inOutXlsSheetName_HUE", context.inOutXlsSheetName_HUE);
		
			parentContextMap_tRunJob_1.put("inOutXlsSheetName_TER", context.inOutXlsSheetName_TER);
		
			parentContextMap_tRunJob_1.put("inOutXlsSheetName_ZGZ", context.inOutXlsSheetName_ZGZ);
		
			parentContextMap_tRunJob_1.put("inXlsOriginalDocName_HUE", context.inXlsOriginalDocName_HUE);
		
			parentContextMap_tRunJob_1.put("inXlsOriginalDocName_TER", context.inXlsOriginalDocName_TER);
		
			parentContextMap_tRunJob_1.put("inXlsOriginalDocName_ZGZ", context.inXlsOriginalDocName_ZGZ);
		
			parentContextMap_tRunJob_1.put("inXlsOriginalDocPath_HUE", context.inXlsOriginalDocPath_HUE);
		
			parentContextMap_tRunJob_1.put("inXlsOriginalDocPath_TER", context.inXlsOriginalDocPath_TER);
		
			parentContextMap_tRunJob_1.put("inXlsOriginalDocPath_ZGZ", context.inXlsOriginalDocPath_ZGZ);
		
			parentContextMap_tRunJob_1.put("inXlsUpdateDocName_HUE", context.inXlsUpdateDocName_HUE);
		
			parentContextMap_tRunJob_1.put("inXlsUpdateDocName_TER", context.inXlsUpdateDocName_TER);
		
			parentContextMap_tRunJob_1.put("inXlsUpdateDocName_ZGZ", context.inXlsUpdateDocName_ZGZ);
		
			parentContextMap_tRunJob_1.put("inXlsUpdateDocPath_HUE", context.inXlsUpdateDocPath_HUE);
		
			parentContextMap_tRunJob_1.put("inXlsUpdateDocPath_TER", context.inXlsUpdateDocPath_TER);
		
			parentContextMap_tRunJob_1.put("inXlsUpdateDocPath_ZGZ", context.inXlsUpdateDocPath_ZGZ);
		
			parentContextMap_tRunJob_1.put("logConfigFile", context.logConfigFile);
		
			parentContextMap_tRunJob_1.put("logOutFile", context.logOutFile);
		
			parentContextMap_tRunJob_1.put("logOutPath", context.logOutPath);
		
			parentContextMap_tRunJob_1.put("outCsvDocName_HUE", context.outCsvDocName_HUE);
		
			parentContextMap_tRunJob_1.put("outCsvDocName_TER", context.outCsvDocName_TER);
		
			parentContextMap_tRunJob_1.put("outCsvDocName_ZGZ", context.outCsvDocName_ZGZ);
		
			parentContextMap_tRunJob_1.put("outDocsPath_HUE", context.outDocsPath_HUE);
		
			parentContextMap_tRunJob_1.put("outDocsPath_TER", context.outDocsPath_TER);
		
			parentContextMap_tRunJob_1.put("outDocsPath_ZGZ", context.outDocsPath_ZGZ);
		
			parentContextMap_tRunJob_1.put("outIcsDocHeaderPropertyProdId_HUE", context.outIcsDocHeaderPropertyProdId_HUE);
		
			parentContextMap_tRunJob_1.put("outIcsDocHeaderPropertyProdId_TER", context.outIcsDocHeaderPropertyProdId_TER);
		
			parentContextMap_tRunJob_1.put("outIcsDocHeaderPropertyProdId_ZGZ", context.outIcsDocHeaderPropertyProdId_ZGZ);
		
			parentContextMap_tRunJob_1.put("outIcsDocName_HUE", context.outIcsDocName_HUE);
		
			parentContextMap_tRunJob_1.put("outIcsDocName_TER", context.outIcsDocName_TER);
		
			parentContextMap_tRunJob_1.put("outIcsDocName_ZGZ", context.outIcsDocName_ZGZ);
		
			parentContextMap_tRunJob_1.put("outJsonDocDataBlock_HUE", context.outJsonDocDataBlock_HUE);
		
			parentContextMap_tRunJob_1.put("outJsonDocDataBlock_TER", context.outJsonDocDataBlock_TER);
		
			parentContextMap_tRunJob_1.put("outJsonDocDataBlock_ZGZ", context.outJsonDocDataBlock_ZGZ);
		
			parentContextMap_tRunJob_1.put("outJsonDocName_HUE", context.outJsonDocName_HUE);
		
			parentContextMap_tRunJob_1.put("outJsonDocName_TER", context.outJsonDocName_TER);
		
			parentContextMap_tRunJob_1.put("outJsonDocName_ZGZ", context.outJsonDocName_ZGZ);
		
			parentContextMap_tRunJob_1.put("outXlsDocName_HUE", context.outXlsDocName_HUE);
		
			parentContextMap_tRunJob_1.put("outXlsDocName_TER", context.outXlsDocName_TER);
		
			parentContextMap_tRunJob_1.put("outXlsDocName_ZGZ", context.outXlsDocName_ZGZ);
		
			parentContextMap_tRunJob_1.put("outXmlDocName_HUE", context.outXmlDocName_HUE);
		
			parentContextMap_tRunJob_1.put("outXmlDocName_TER", context.outXmlDocName_TER);
		
			parentContextMap_tRunJob_1.put("outXmlDocName_ZGZ", context.outXmlDocName_ZGZ);
		
			parentContextMap_tRunJob_1.put("outXmlDocRootTag_HUE", context.outXmlDocRootTag_HUE);
		
			parentContextMap_tRunJob_1.put("outXmlDocRootTag_TER", context.outXmlDocRootTag_TER);
		
			parentContextMap_tRunJob_1.put("outXmlDocRootTag_ZGZ", context.outXmlDocRootTag_ZGZ);
		
			parentContextMap_tRunJob_1.put("outXmlDocRowTag", context.outXmlDocRowTag);
		
			parentContextMap_tRunJob_1.put("databaseTableName", context.databaseTableName);
		
			parentContextMap_tRunJob_1.put("etlConfName", context.etlConfName);
		
			parentContextMap_tRunJob_1.put("etlConfPath", context.etlConfPath);
		
			parentContextMap_tRunJob_1.put("inOutXlsSheetName", context.inOutXlsSheetName);
		
			parentContextMap_tRunJob_1.put("inXlsOriginalDocName", context.inXlsOriginalDocName);
		
			parentContextMap_tRunJob_1.put("inXlsOriginalDocPath", context.inXlsOriginalDocPath);
		
			parentContextMap_tRunJob_1.put("inXlsUpdateDocName", context.inXlsUpdateDocName);
		
			parentContextMap_tRunJob_1.put("inXlsUpdateDocPath", context.inXlsUpdateDocPath);
		
			parentContextMap_tRunJob_1.put("outCsvDocName", context.outCsvDocName);
		
			parentContextMap_tRunJob_1.put("outDocsPath", context.outDocsPath);
		
			parentContextMap_tRunJob_1.put("outIcsDocHeaderPropertyProdId", context.outIcsDocHeaderPropertyProdId);
		
			parentContextMap_tRunJob_1.put("outIcsDocName", context.outIcsDocName);
		
			parentContextMap_tRunJob_1.put("outJsonDocDataBlock", context.outJsonDocDataBlock);
		
			parentContextMap_tRunJob_1.put("outJsonDocName", context.outJsonDocName);
		
			parentContextMap_tRunJob_1.put("outXlsDocName", context.outXlsDocName);
		
			parentContextMap_tRunJob_1.put("outXmlDocName", context.outXmlDocName);
		
			parentContextMap_tRunJob_1.put("outXmlDocRootTag", context.outXmlDocRootTag);
		
			parentContextMap_tRunJob_1.put("provincesToLoad", context.provincesToLoad);
		 
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);       
			paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
			
			if(parametersToEncrypt_tRunJob_1 .contains(key_tRunJob_1) && value_tRunJob_1 != null) {
				paraListForLog_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + routines.system.PasswordEncryptUtil.encryptPassword(String.valueOf(value_tRunJob_1)));
			} else {
				paraListForLog_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
	
		System.out.println("tRunJob_1 in AOD_Festivos call festivosdga.aod_generaficherosfestivos_1_0.AOD_GeneraFicherosFestivos with:\n\n" + paraListForLog_tRunJob_1 + "\n");
	
		festivosdga.aod_generaficherosfestivos_1_0.AOD_GeneraFicherosFestivos childJob_tRunJob_1 = new festivosdga.aod_generaficherosfestivos_1_0.AOD_GeneraFicherosFestivos();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
	        		throw new RuntimeException("Child job running failed");
				}
			
	  	

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */



	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_FESTIVOSDGA_AOD_Festivos = new byte[0];
    static byte[] commonByteArray_FESTIVOSDGA_AOD_Festivos = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FESTIVOSDGA_AOD_Festivos.length) {
				if(length < 1024 && commonByteArray_FESTIVOSDGA_AOD_Festivos.length == 0) {
   					commonByteArray_FESTIVOSDGA_AOD_Festivos = new byte[1024];
				} else {
   					commonByteArray_FESTIVOSDGA_AOD_Festivos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FESTIVOSDGA_AOD_Festivos, 0, length);
			strReturn = new String(commonByteArray_FESTIVOSDGA_AOD_Festivos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FESTIVOSDGA_AOD_Festivos) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRunJob_2 = 0;
		
    	class BytesLimit65535_tRunJob_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_2().limitLog4jByte();


 



/**
 * [tRunJob_2 begin ] stop
 */



	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		
    	class BytesLimit65535_tJava_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_2().limitLog4jByte();


context.databaseTableName = context.databaseTableName_HUE;
context.inXlsOriginalDocName = context.inXlsOriginalDocName_HUE;
context.inXlsUpdateDocName = context.inXlsUpdateDocName_HUE;
context.inOutXlsSheetName = context.inOutXlsSheetName_HUE;
context.outXlsDocName = context.outXlsDocName_HUE;
context.outCsvDocName = context.outCsvDocName_HUE;
context.outJsonDocDataBlock = context.outJsonDocDataBlock_HUE;
context.outJsonDocName = context.outJsonDocName_HUE;
context.outXmlDocRootTag = context.outXmlDocRootTag_HUE;
context.outXmlDocName = context.outXmlDocName_HUE;
context.outIcsDocHeaderPropertyProdId = context.outIcsDocHeaderPropertyProdId_HUE;
context.outIcsDocName = context.outIcsDocName_HUE;
context.inXlsOriginalDocPath = context.inXlsOriginalDocPath_HUE;
context.inXlsUpdateDocPath = context.inXlsUpdateDocPath_HUE;
context.outDocsPath = context.outDocsPath_HUE;
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */

	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        			paraList_tRunJob_2.add("--context=Server");
	      			
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	 
	java.util.List<String> paraListForLog_tRunJob_2 = new java.util.ArrayList<String>();
	paraListForLog_tRunJob_2.addAll(paraList_tRunJob_2);
	List<String> parametersToEncrypt_tRunJob_2 = new java.util.ArrayList<String>();
	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_2.put("databaseAdditionalParams", context.databaseAdditionalParams);
		
			parentContextMap_tRunJob_2.put("databaseConnectionHost", context.databaseConnectionHost);
		
			parentContextMap_tRunJob_2.put("databaseConnectionPass", context.databaseConnectionPass);
		
			parentContextMap_tRunJob_2.put("databaseConnectionPort", context.databaseConnectionPort);
		
			parentContextMap_tRunJob_2.put("databaseConnectionUser", context.databaseConnectionUser);
		
			parentContextMap_tRunJob_2.put("databaseName", context.databaseName);
		
			parentContextMap_tRunJob_2.put("databasePath", context.databasePath);
		
			parentContextMap_tRunJob_2.put("databaseQueryOrderBy", context.databaseQueryOrderBy);
		
			parentContextMap_tRunJob_2.put("databaseQuerySelect", context.databaseQuerySelect);
		
			parentContextMap_tRunJob_2.put("databaseTableName_HUE", context.databaseTableName_HUE);
		
			parentContextMap_tRunJob_2.put("databaseTableName_TER", context.databaseTableName_TER);
		
			parentContextMap_tRunJob_2.put("databaseTableName_ZGZ", context.databaseTableName_ZGZ);
		
			parentContextMap_tRunJob_2.put("docsEncoding", context.docsEncoding);
		
			parentContextMap_tRunJob_2.put("inOutXlsSheetName_HUE", context.inOutXlsSheetName_HUE);
		
			parentContextMap_tRunJob_2.put("inOutXlsSheetName_TER", context.inOutXlsSheetName_TER);
		
			parentContextMap_tRunJob_2.put("inOutXlsSheetName_ZGZ", context.inOutXlsSheetName_ZGZ);
		
			parentContextMap_tRunJob_2.put("inXlsOriginalDocName_HUE", context.inXlsOriginalDocName_HUE);
		
			parentContextMap_tRunJob_2.put("inXlsOriginalDocName_TER", context.inXlsOriginalDocName_TER);
		
			parentContextMap_tRunJob_2.put("inXlsOriginalDocName_ZGZ", context.inXlsOriginalDocName_ZGZ);
		
			parentContextMap_tRunJob_2.put("inXlsOriginalDocPath_HUE", context.inXlsOriginalDocPath_HUE);
		
			parentContextMap_tRunJob_2.put("inXlsOriginalDocPath_TER", context.inXlsOriginalDocPath_TER);
		
			parentContextMap_tRunJob_2.put("inXlsOriginalDocPath_ZGZ", context.inXlsOriginalDocPath_ZGZ);
		
			parentContextMap_tRunJob_2.put("inXlsUpdateDocName_HUE", context.inXlsUpdateDocName_HUE);
		
			parentContextMap_tRunJob_2.put("inXlsUpdateDocName_TER", context.inXlsUpdateDocName_TER);
		
			parentContextMap_tRunJob_2.put("inXlsUpdateDocName_ZGZ", context.inXlsUpdateDocName_ZGZ);
		
			parentContextMap_tRunJob_2.put("inXlsUpdateDocPath_HUE", context.inXlsUpdateDocPath_HUE);
		
			parentContextMap_tRunJob_2.put("inXlsUpdateDocPath_TER", context.inXlsUpdateDocPath_TER);
		
			parentContextMap_tRunJob_2.put("inXlsUpdateDocPath_ZGZ", context.inXlsUpdateDocPath_ZGZ);
		
			parentContextMap_tRunJob_2.put("logConfigFile", context.logConfigFile);
		
			parentContextMap_tRunJob_2.put("logOutFile", context.logOutFile);
		
			parentContextMap_tRunJob_2.put("logOutPath", context.logOutPath);
		
			parentContextMap_tRunJob_2.put("outCsvDocName_HUE", context.outCsvDocName_HUE);
		
			parentContextMap_tRunJob_2.put("outCsvDocName_TER", context.outCsvDocName_TER);
		
			parentContextMap_tRunJob_2.put("outCsvDocName_ZGZ", context.outCsvDocName_ZGZ);
		
			parentContextMap_tRunJob_2.put("outDocsPath_HUE", context.outDocsPath_HUE);
		
			parentContextMap_tRunJob_2.put("outDocsPath_TER", context.outDocsPath_TER);
		
			parentContextMap_tRunJob_2.put("outDocsPath_ZGZ", context.outDocsPath_ZGZ);
		
			parentContextMap_tRunJob_2.put("outIcsDocHeaderPropertyProdId_HUE", context.outIcsDocHeaderPropertyProdId_HUE);
		
			parentContextMap_tRunJob_2.put("outIcsDocHeaderPropertyProdId_TER", context.outIcsDocHeaderPropertyProdId_TER);
		
			parentContextMap_tRunJob_2.put("outIcsDocHeaderPropertyProdId_ZGZ", context.outIcsDocHeaderPropertyProdId_ZGZ);
		
			parentContextMap_tRunJob_2.put("outIcsDocName_HUE", context.outIcsDocName_HUE);
		
			parentContextMap_tRunJob_2.put("outIcsDocName_TER", context.outIcsDocName_TER);
		
			parentContextMap_tRunJob_2.put("outIcsDocName_ZGZ", context.outIcsDocName_ZGZ);
		
			parentContextMap_tRunJob_2.put("outJsonDocDataBlock_HUE", context.outJsonDocDataBlock_HUE);
		
			parentContextMap_tRunJob_2.put("outJsonDocDataBlock_TER", context.outJsonDocDataBlock_TER);
		
			parentContextMap_tRunJob_2.put("outJsonDocDataBlock_ZGZ", context.outJsonDocDataBlock_ZGZ);
		
			parentContextMap_tRunJob_2.put("outJsonDocName_HUE", context.outJsonDocName_HUE);
		
			parentContextMap_tRunJob_2.put("outJsonDocName_TER", context.outJsonDocName_TER);
		
			parentContextMap_tRunJob_2.put("outJsonDocName_ZGZ", context.outJsonDocName_ZGZ);
		
			parentContextMap_tRunJob_2.put("outXlsDocName_HUE", context.outXlsDocName_HUE);
		
			parentContextMap_tRunJob_2.put("outXlsDocName_TER", context.outXlsDocName_TER);
		
			parentContextMap_tRunJob_2.put("outXlsDocName_ZGZ", context.outXlsDocName_ZGZ);
		
			parentContextMap_tRunJob_2.put("outXmlDocName_HUE", context.outXmlDocName_HUE);
		
			parentContextMap_tRunJob_2.put("outXmlDocName_TER", context.outXmlDocName_TER);
		
			parentContextMap_tRunJob_2.put("outXmlDocName_ZGZ", context.outXmlDocName_ZGZ);
		
			parentContextMap_tRunJob_2.put("outXmlDocRootTag_HUE", context.outXmlDocRootTag_HUE);
		
			parentContextMap_tRunJob_2.put("outXmlDocRootTag_TER", context.outXmlDocRootTag_TER);
		
			parentContextMap_tRunJob_2.put("outXmlDocRootTag_ZGZ", context.outXmlDocRootTag_ZGZ);
		
			parentContextMap_tRunJob_2.put("outXmlDocRowTag", context.outXmlDocRowTag);
		
			parentContextMap_tRunJob_2.put("databaseTableName", context.databaseTableName);
		
			parentContextMap_tRunJob_2.put("etlConfName", context.etlConfName);
		
			parentContextMap_tRunJob_2.put("etlConfPath", context.etlConfPath);
		
			parentContextMap_tRunJob_2.put("inOutXlsSheetName", context.inOutXlsSheetName);
		
			parentContextMap_tRunJob_2.put("inXlsOriginalDocName", context.inXlsOriginalDocName);
		
			parentContextMap_tRunJob_2.put("inXlsOriginalDocPath", context.inXlsOriginalDocPath);
		
			parentContextMap_tRunJob_2.put("inXlsUpdateDocName", context.inXlsUpdateDocName);
		
			parentContextMap_tRunJob_2.put("inXlsUpdateDocPath", context.inXlsUpdateDocPath);
		
			parentContextMap_tRunJob_2.put("outCsvDocName", context.outCsvDocName);
		
			parentContextMap_tRunJob_2.put("outDocsPath", context.outDocsPath);
		
			parentContextMap_tRunJob_2.put("outIcsDocHeaderPropertyProdId", context.outIcsDocHeaderPropertyProdId);
		
			parentContextMap_tRunJob_2.put("outIcsDocName", context.outIcsDocName);
		
			parentContextMap_tRunJob_2.put("outJsonDocDataBlock", context.outJsonDocDataBlock);
		
			parentContextMap_tRunJob_2.put("outJsonDocName", context.outJsonDocName);
		
			parentContextMap_tRunJob_2.put("outXlsDocName", context.outXlsDocName);
		
			parentContextMap_tRunJob_2.put("outXmlDocName", context.outXmlDocName);
		
			parentContextMap_tRunJob_2.put("outXmlDocRootTag", context.outXmlDocRootTag);
		
			parentContextMap_tRunJob_2.put("provincesToLoad", context.provincesToLoad);
		 
		java.util.Enumeration<?> propertyNames_tRunJob_2 = context.propertyNames();
		while (propertyNames_tRunJob_2.hasMoreElements()) {
			String key_tRunJob_2 = (String) propertyNames_tRunJob_2.nextElement();
			Object value_tRunJob_2 = (Object) context.get(key_tRunJob_2);       
			paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + value_tRunJob_2);
			
			if(parametersToEncrypt_tRunJob_2 .contains(key_tRunJob_2) && value_tRunJob_2 != null) {
				paraListForLog_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + routines.system.PasswordEncryptUtil.encryptPassword(String.valueOf(value_tRunJob_2)));
			} else {
				paraListForLog_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + value_tRunJob_2);
			}
			
		}
		

	Object obj_tRunJob_2 = null;

	
	
		System.out.println("tRunJob_2 in AOD_Festivos call festivosdga.aod_generaficherosfestivos_1_0.AOD_GeneraFicherosFestivos with:\n\n" + paraListForLog_tRunJob_2 + "\n");
	
		festivosdga.aod_generaficherosfestivos_1_0.AOD_GeneraFicherosFestivos childJob_tRunJob_2 = new festivosdga.aod_generaficherosfestivos_1_0.AOD_GeneraFicherosFestivos();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
	  	
				errorCode = childJob_tRunJob_2.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_2.getErrorCode() == null){
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
		    }
		    if (childJob_tRunJob_2.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
	        		throw new RuntimeException("Child job running failed");
				}
			
	  	

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */



	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */

	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */

	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_FESTIVOSDGA_AOD_Festivos = new byte[0];
    static byte[] commonByteArray_FESTIVOSDGA_AOD_Festivos = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FESTIVOSDGA_AOD_Festivos.length) {
				if(length < 1024 && commonByteArray_FESTIVOSDGA_AOD_Festivos.length == 0) {
   					commonByteArray_FESTIVOSDGA_AOD_Festivos = new byte[1024];
				} else {
   					commonByteArray_FESTIVOSDGA_AOD_Festivos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FESTIVOSDGA_AOD_Festivos, 0, length);
			strReturn = new String(commonByteArray_FESTIVOSDGA_AOD_Festivos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FESTIVOSDGA_AOD_Festivos) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tRunJob_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_3", false);
		start_Hash.put("tRunJob_3", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRunJob_3 = 0;
		
    	class BytesLimit65535_tRunJob_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_3().limitLog4jByte();


 



/**
 * [tRunJob_3 begin ] stop
 */



	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		
    	class BytesLimit65535_tJava_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_3().limitLog4jByte();


context.databaseTableName = context.databaseTableName_TER;
context.inXlsOriginalDocName = context.inXlsOriginalDocName_TER;
context.inXlsUpdateDocName = context.inXlsUpdateDocName_TER;
context.inOutXlsSheetName = context.inOutXlsSheetName_TER;
context.outXlsDocName = context.outXlsDocName_TER;
context.outCsvDocName = context.outCsvDocName_TER;
context.outJsonDocDataBlock = context.outJsonDocDataBlock_TER;
context.outJsonDocName = context.outJsonDocName_TER;
context.outXmlDocRootTag = context.outXmlDocRootTag_TER;
context.outXmlDocName = context.outXmlDocName_TER;
context.outIcsDocHeaderPropertyProdId = context.outIcsDocHeaderPropertyProdId_TER;
context.outIcsDocName = context.outIcsDocName_TER;
context.inXlsOriginalDocPath = context.inXlsOriginalDocPath_TER;
context.inXlsUpdateDocPath = context.inXlsUpdateDocPath_TER;
context.outDocsPath = context.outDocsPath_TER;
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */

	
	/**
	 * [tRunJob_3 main ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		
	java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_3.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_3.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_3.add("--father_node=tRunJob_3");
	      			
	        			paraList_tRunJob_3.add("--context=Server");
	      			
	//for feature:10589
	
		paraList_tRunJob_3.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null){
		paraList_tRunJob_3.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

	 
	java.util.List<String> paraListForLog_tRunJob_3 = new java.util.ArrayList<String>();
	paraListForLog_tRunJob_3.addAll(paraList_tRunJob_3);
	List<String> parametersToEncrypt_tRunJob_3 = new java.util.ArrayList<String>();
	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_3.put("databaseAdditionalParams", context.databaseAdditionalParams);
		
			parentContextMap_tRunJob_3.put("databaseConnectionHost", context.databaseConnectionHost);
		
			parentContextMap_tRunJob_3.put("databaseConnectionPass", context.databaseConnectionPass);
		
			parentContextMap_tRunJob_3.put("databaseConnectionPort", context.databaseConnectionPort);
		
			parentContextMap_tRunJob_3.put("databaseConnectionUser", context.databaseConnectionUser);
		
			parentContextMap_tRunJob_3.put("databaseName", context.databaseName);
		
			parentContextMap_tRunJob_3.put("databasePath", context.databasePath);
		
			parentContextMap_tRunJob_3.put("databaseQueryOrderBy", context.databaseQueryOrderBy);
		
			parentContextMap_tRunJob_3.put("databaseQuerySelect", context.databaseQuerySelect);
		
			parentContextMap_tRunJob_3.put("databaseTableName_HUE", context.databaseTableName_HUE);
		
			parentContextMap_tRunJob_3.put("databaseTableName_TER", context.databaseTableName_TER);
		
			parentContextMap_tRunJob_3.put("databaseTableName_ZGZ", context.databaseTableName_ZGZ);
		
			parentContextMap_tRunJob_3.put("docsEncoding", context.docsEncoding);
		
			parentContextMap_tRunJob_3.put("inOutXlsSheetName_HUE", context.inOutXlsSheetName_HUE);
		
			parentContextMap_tRunJob_3.put("inOutXlsSheetName_TER", context.inOutXlsSheetName_TER);
		
			parentContextMap_tRunJob_3.put("inOutXlsSheetName_ZGZ", context.inOutXlsSheetName_ZGZ);
		
			parentContextMap_tRunJob_3.put("inXlsOriginalDocName_HUE", context.inXlsOriginalDocName_HUE);
		
			parentContextMap_tRunJob_3.put("inXlsOriginalDocName_TER", context.inXlsOriginalDocName_TER);
		
			parentContextMap_tRunJob_3.put("inXlsOriginalDocName_ZGZ", context.inXlsOriginalDocName_ZGZ);
		
			parentContextMap_tRunJob_3.put("inXlsOriginalDocPath_HUE", context.inXlsOriginalDocPath_HUE);
		
			parentContextMap_tRunJob_3.put("inXlsOriginalDocPath_TER", context.inXlsOriginalDocPath_TER);
		
			parentContextMap_tRunJob_3.put("inXlsOriginalDocPath_ZGZ", context.inXlsOriginalDocPath_ZGZ);
		
			parentContextMap_tRunJob_3.put("inXlsUpdateDocName_HUE", context.inXlsUpdateDocName_HUE);
		
			parentContextMap_tRunJob_3.put("inXlsUpdateDocName_TER", context.inXlsUpdateDocName_TER);
		
			parentContextMap_tRunJob_3.put("inXlsUpdateDocName_ZGZ", context.inXlsUpdateDocName_ZGZ);
		
			parentContextMap_tRunJob_3.put("inXlsUpdateDocPath_HUE", context.inXlsUpdateDocPath_HUE);
		
			parentContextMap_tRunJob_3.put("inXlsUpdateDocPath_TER", context.inXlsUpdateDocPath_TER);
		
			parentContextMap_tRunJob_3.put("inXlsUpdateDocPath_ZGZ", context.inXlsUpdateDocPath_ZGZ);
		
			parentContextMap_tRunJob_3.put("logConfigFile", context.logConfigFile);
		
			parentContextMap_tRunJob_3.put("logOutFile", context.logOutFile);
		
			parentContextMap_tRunJob_3.put("logOutPath", context.logOutPath);
		
			parentContextMap_tRunJob_3.put("outCsvDocName_HUE", context.outCsvDocName_HUE);
		
			parentContextMap_tRunJob_3.put("outCsvDocName_TER", context.outCsvDocName_TER);
		
			parentContextMap_tRunJob_3.put("outCsvDocName_ZGZ", context.outCsvDocName_ZGZ);
		
			parentContextMap_tRunJob_3.put("outDocsPath_HUE", context.outDocsPath_HUE);
		
			parentContextMap_tRunJob_3.put("outDocsPath_TER", context.outDocsPath_TER);
		
			parentContextMap_tRunJob_3.put("outDocsPath_ZGZ", context.outDocsPath_ZGZ);
		
			parentContextMap_tRunJob_3.put("outIcsDocHeaderPropertyProdId_HUE", context.outIcsDocHeaderPropertyProdId_HUE);
		
			parentContextMap_tRunJob_3.put("outIcsDocHeaderPropertyProdId_TER", context.outIcsDocHeaderPropertyProdId_TER);
		
			parentContextMap_tRunJob_3.put("outIcsDocHeaderPropertyProdId_ZGZ", context.outIcsDocHeaderPropertyProdId_ZGZ);
		
			parentContextMap_tRunJob_3.put("outIcsDocName_HUE", context.outIcsDocName_HUE);
		
			parentContextMap_tRunJob_3.put("outIcsDocName_TER", context.outIcsDocName_TER);
		
			parentContextMap_tRunJob_3.put("outIcsDocName_ZGZ", context.outIcsDocName_ZGZ);
		
			parentContextMap_tRunJob_3.put("outJsonDocDataBlock_HUE", context.outJsonDocDataBlock_HUE);
		
			parentContextMap_tRunJob_3.put("outJsonDocDataBlock_TER", context.outJsonDocDataBlock_TER);
		
			parentContextMap_tRunJob_3.put("outJsonDocDataBlock_ZGZ", context.outJsonDocDataBlock_ZGZ);
		
			parentContextMap_tRunJob_3.put("outJsonDocName_HUE", context.outJsonDocName_HUE);
		
			parentContextMap_tRunJob_3.put("outJsonDocName_TER", context.outJsonDocName_TER);
		
			parentContextMap_tRunJob_3.put("outJsonDocName_ZGZ", context.outJsonDocName_ZGZ);
		
			parentContextMap_tRunJob_3.put("outXlsDocName_HUE", context.outXlsDocName_HUE);
		
			parentContextMap_tRunJob_3.put("outXlsDocName_TER", context.outXlsDocName_TER);
		
			parentContextMap_tRunJob_3.put("outXlsDocName_ZGZ", context.outXlsDocName_ZGZ);
		
			parentContextMap_tRunJob_3.put("outXmlDocName_HUE", context.outXmlDocName_HUE);
		
			parentContextMap_tRunJob_3.put("outXmlDocName_TER", context.outXmlDocName_TER);
		
			parentContextMap_tRunJob_3.put("outXmlDocName_ZGZ", context.outXmlDocName_ZGZ);
		
			parentContextMap_tRunJob_3.put("outXmlDocRootTag_HUE", context.outXmlDocRootTag_HUE);
		
			parentContextMap_tRunJob_3.put("outXmlDocRootTag_TER", context.outXmlDocRootTag_TER);
		
			parentContextMap_tRunJob_3.put("outXmlDocRootTag_ZGZ", context.outXmlDocRootTag_ZGZ);
		
			parentContextMap_tRunJob_3.put("outXmlDocRowTag", context.outXmlDocRowTag);
		
			parentContextMap_tRunJob_3.put("databaseTableName", context.databaseTableName);
		
			parentContextMap_tRunJob_3.put("etlConfName", context.etlConfName);
		
			parentContextMap_tRunJob_3.put("etlConfPath", context.etlConfPath);
		
			parentContextMap_tRunJob_3.put("inOutXlsSheetName", context.inOutXlsSheetName);
		
			parentContextMap_tRunJob_3.put("inXlsOriginalDocName", context.inXlsOriginalDocName);
		
			parentContextMap_tRunJob_3.put("inXlsOriginalDocPath", context.inXlsOriginalDocPath);
		
			parentContextMap_tRunJob_3.put("inXlsUpdateDocName", context.inXlsUpdateDocName);
		
			parentContextMap_tRunJob_3.put("inXlsUpdateDocPath", context.inXlsUpdateDocPath);
		
			parentContextMap_tRunJob_3.put("outCsvDocName", context.outCsvDocName);
		
			parentContextMap_tRunJob_3.put("outDocsPath", context.outDocsPath);
		
			parentContextMap_tRunJob_3.put("outIcsDocHeaderPropertyProdId", context.outIcsDocHeaderPropertyProdId);
		
			parentContextMap_tRunJob_3.put("outIcsDocName", context.outIcsDocName);
		
			parentContextMap_tRunJob_3.put("outJsonDocDataBlock", context.outJsonDocDataBlock);
		
			parentContextMap_tRunJob_3.put("outJsonDocName", context.outJsonDocName);
		
			parentContextMap_tRunJob_3.put("outXlsDocName", context.outXlsDocName);
		
			parentContextMap_tRunJob_3.put("outXmlDocName", context.outXmlDocName);
		
			parentContextMap_tRunJob_3.put("outXmlDocRootTag", context.outXmlDocRootTag);
		
			parentContextMap_tRunJob_3.put("provincesToLoad", context.provincesToLoad);
		 
		java.util.Enumeration<?> propertyNames_tRunJob_3 = context.propertyNames();
		while (propertyNames_tRunJob_3.hasMoreElements()) {
			String key_tRunJob_3 = (String) propertyNames_tRunJob_3.nextElement();
			Object value_tRunJob_3 = (Object) context.get(key_tRunJob_3);       
			paraList_tRunJob_3.add("--context_param " + key_tRunJob_3 + "=" + value_tRunJob_3);
			
			if(parametersToEncrypt_tRunJob_3 .contains(key_tRunJob_3) && value_tRunJob_3 != null) {
				paraListForLog_tRunJob_3.add("--context_param " + key_tRunJob_3 + "=" + routines.system.PasswordEncryptUtil.encryptPassword(String.valueOf(value_tRunJob_3)));
			} else {
				paraListForLog_tRunJob_3.add("--context_param " + key_tRunJob_3 + "=" + value_tRunJob_3);
			}
			
		}
		

	Object obj_tRunJob_3 = null;

	
	
		System.out.println("tRunJob_3 in AOD_Festivos call festivosdga.aod_generaficherosfestivos_1_0.AOD_GeneraFicherosFestivos with:\n\n" + paraListForLog_tRunJob_3 + "\n");
	
		festivosdga.aod_generaficherosfestivos_1_0.AOD_GeneraFicherosFestivos childJob_tRunJob_3 = new festivosdga.aod_generaficherosfestivos_1_0.AOD_GeneraFicherosFestivos();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_3) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
			        .entrySet()) {
	            dataSources_tRunJob_3.put(talendDataSourceEntry_tRunJob_3.getKey(),
	                    talendDataSourceEntry_tRunJob_3.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
	    }
		  
			childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;
		  
		
		String[][] childReturn_tRunJob_3 = childJob_tRunJob_3.runJob((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));
		
	  	
				errorCode = childJob_tRunJob_3.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_3.getErrorCode() == null){
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getStatus() != null && ("failure").equals(childJob_tRunJob_3.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getErrorCode());
		    }
		    if (childJob_tRunJob_3.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_3.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_3.getErrorCode() != null || ("failure").equals(childJob_tRunJob_3.getStatus())) {
	        		throw new RuntimeException("Child job running failed");
				}
			
	  	

 


	tos_count_tRunJob_3++;

/**
 * [tRunJob_3 main ] stop
 */



	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */

	
	/**
	 * [tRunJob_3 end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRunJob_3", true);
end_Hash.put("tRunJob_3", System.currentTimeMillis());




/**
 * [tRunJob_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */

	
	/**
	 * [tRunJob_3 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Server";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final AOD_Festivos AOD_FestivosClass = new AOD_Festivos();

        int exitCode = AOD_FestivosClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = AOD_Festivos.class.getClassLoader().getResourceAsStream("festivosdga/aod_festivos_1_0/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
                context.databaseAdditionalParams=(String) context.getProperty("databaseAdditionalParams");
                context.databaseConnectionHost=(String) context.getProperty("databaseConnectionHost");
                context.databaseConnectionPass=(String) context.getProperty("databaseConnectionPass");
                context.databaseConnectionPort=(String) context.getProperty("databaseConnectionPort");
                context.databaseConnectionUser=(String) context.getProperty("databaseConnectionUser");
                context.databaseName=(String) context.getProperty("databaseName");
                context.databasePath=(String) context.getProperty("databasePath");
                context.databaseQueryOrderBy=(String) context.getProperty("databaseQueryOrderBy");
                context.databaseQuerySelect=(String) context.getProperty("databaseQuerySelect");
                context.databaseTableName_HUE=(String) context.getProperty("databaseTableName_HUE");
                context.databaseTableName_TER=(String) context.getProperty("databaseTableName_TER");
                context.databaseTableName_ZGZ=(String) context.getProperty("databaseTableName_ZGZ");
                context.docsEncoding=(String) context.getProperty("docsEncoding");
                context.inOutXlsSheetName_HUE=(String) context.getProperty("inOutXlsSheetName_HUE");
                context.inOutXlsSheetName_TER=(String) context.getProperty("inOutXlsSheetName_TER");
                context.inOutXlsSheetName_ZGZ=(String) context.getProperty("inOutXlsSheetName_ZGZ");
                context.inXlsOriginalDocName_HUE=(String) context.getProperty("inXlsOriginalDocName_HUE");
                context.inXlsOriginalDocName_TER=(String) context.getProperty("inXlsOriginalDocName_TER");
                context.inXlsOriginalDocName_ZGZ=(String) context.getProperty("inXlsOriginalDocName_ZGZ");
                context.inXlsOriginalDocPath_HUE=(String) context.getProperty("inXlsOriginalDocPath_HUE");
                context.inXlsOriginalDocPath_TER=(String) context.getProperty("inXlsOriginalDocPath_TER");
                context.inXlsOriginalDocPath_ZGZ=(String) context.getProperty("inXlsOriginalDocPath_ZGZ");
                context.inXlsUpdateDocName_HUE=(String) context.getProperty("inXlsUpdateDocName_HUE");
                context.inXlsUpdateDocName_TER=(String) context.getProperty("inXlsUpdateDocName_TER");
                context.inXlsUpdateDocName_ZGZ=(String) context.getProperty("inXlsUpdateDocName_ZGZ");
                context.inXlsUpdateDocPath_HUE=(String) context.getProperty("inXlsUpdateDocPath_HUE");
                context.inXlsUpdateDocPath_TER=(String) context.getProperty("inXlsUpdateDocPath_TER");
                context.inXlsUpdateDocPath_ZGZ=(String) context.getProperty("inXlsUpdateDocPath_ZGZ");
                context.logConfigFile=(String) context.getProperty("logConfigFile");
                context.logOutFile=(String) context.getProperty("logOutFile");
                context.logOutPath=(String) context.getProperty("logOutPath");
                context.outCsvDocName_HUE=(String) context.getProperty("outCsvDocName_HUE");
                context.outCsvDocName_TER=(String) context.getProperty("outCsvDocName_TER");
                context.outCsvDocName_ZGZ=(String) context.getProperty("outCsvDocName_ZGZ");
                context.outDocsPath_HUE=(String) context.getProperty("outDocsPath_HUE");
                context.outDocsPath_TER=(String) context.getProperty("outDocsPath_TER");
                context.outDocsPath_ZGZ=(String) context.getProperty("outDocsPath_ZGZ");
                context.outIcsDocHeaderPropertyProdId_HUE=(String) context.getProperty("outIcsDocHeaderPropertyProdId_HUE");
                context.outIcsDocHeaderPropertyProdId_TER=(String) context.getProperty("outIcsDocHeaderPropertyProdId_TER");
                context.outIcsDocHeaderPropertyProdId_ZGZ=(String) context.getProperty("outIcsDocHeaderPropertyProdId_ZGZ");
                context.outIcsDocName_HUE=(String) context.getProperty("outIcsDocName_HUE");
                context.outIcsDocName_TER=(String) context.getProperty("outIcsDocName_TER");
                context.outIcsDocName_ZGZ=(String) context.getProperty("outIcsDocName_ZGZ");
                context.outJsonDocDataBlock_HUE=(String) context.getProperty("outJsonDocDataBlock_HUE");
                context.outJsonDocDataBlock_TER=(String) context.getProperty("outJsonDocDataBlock_TER");
                context.outJsonDocDataBlock_ZGZ=(String) context.getProperty("outJsonDocDataBlock_ZGZ");
                context.outJsonDocName_HUE=(String) context.getProperty("outJsonDocName_HUE");
                context.outJsonDocName_TER=(String) context.getProperty("outJsonDocName_TER");
                context.outJsonDocName_ZGZ=(String) context.getProperty("outJsonDocName_ZGZ");
                context.outXlsDocName_HUE=(String) context.getProperty("outXlsDocName_HUE");
                context.outXlsDocName_TER=(String) context.getProperty("outXlsDocName_TER");
                context.outXlsDocName_ZGZ=(String) context.getProperty("outXlsDocName_ZGZ");
                context.outXmlDocName_HUE=(String) context.getProperty("outXmlDocName_HUE");
                context.outXmlDocName_TER=(String) context.getProperty("outXmlDocName_TER");
                context.outXmlDocName_ZGZ=(String) context.getProperty("outXmlDocName_ZGZ");
                context.outXmlDocRootTag_HUE=(String) context.getProperty("outXmlDocRootTag_HUE");
                context.outXmlDocRootTag_TER=(String) context.getProperty("outXmlDocRootTag_TER");
                context.outXmlDocRootTag_ZGZ=(String) context.getProperty("outXmlDocRootTag_ZGZ");
                context.outXmlDocRowTag=(String) context.getProperty("outXmlDocRowTag");
                context.databaseTableName=(String) context.getProperty("databaseTableName");
                context.etlConfName=(String) context.getProperty("etlConfName");
                context.etlConfPath=(String) context.getProperty("etlConfPath");
                context.inOutXlsSheetName=(String) context.getProperty("inOutXlsSheetName");
                context.inXlsOriginalDocName=(String) context.getProperty("inXlsOriginalDocName");
                context.inXlsOriginalDocPath=(String) context.getProperty("inXlsOriginalDocPath");
                context.inXlsUpdateDocName=(String) context.getProperty("inXlsUpdateDocName");
                context.inXlsUpdateDocPath=(String) context.getProperty("inXlsUpdateDocPath");
                context.outCsvDocName=(String) context.getProperty("outCsvDocName");
                context.outDocsPath=(String) context.getProperty("outDocsPath");
                context.outIcsDocHeaderPropertyProdId=(String) context.getProperty("outIcsDocHeaderPropertyProdId");
                context.outIcsDocName=(String) context.getProperty("outIcsDocName");
                context.outJsonDocDataBlock=(String) context.getProperty("outJsonDocDataBlock");
                context.outJsonDocName=(String) context.getProperty("outJsonDocName");
                context.outXlsDocName=(String) context.getProperty("outXlsDocName");
                context.outXmlDocName=(String) context.getProperty("outXmlDocName");
                context.outXmlDocRootTag=(String) context.getProperty("outXmlDocRootTag");
                context.provincesToLoad=(String) context.getProperty("provincesToLoad");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("databaseAdditionalParams")) {
                context.databaseAdditionalParams = (String) parentContextMap.get("databaseAdditionalParams");
            }if (parentContextMap.containsKey("databaseConnectionHost")) {
                context.databaseConnectionHost = (String) parentContextMap.get("databaseConnectionHost");
            }if (parentContextMap.containsKey("databaseConnectionPass")) {
                context.databaseConnectionPass = (String) parentContextMap.get("databaseConnectionPass");
            }if (parentContextMap.containsKey("databaseConnectionPort")) {
                context.databaseConnectionPort = (String) parentContextMap.get("databaseConnectionPort");
            }if (parentContextMap.containsKey("databaseConnectionUser")) {
                context.databaseConnectionUser = (String) parentContextMap.get("databaseConnectionUser");
            }if (parentContextMap.containsKey("databaseName")) {
                context.databaseName = (String) parentContextMap.get("databaseName");
            }if (parentContextMap.containsKey("databasePath")) {
                context.databasePath = (String) parentContextMap.get("databasePath");
            }if (parentContextMap.containsKey("databaseQueryOrderBy")) {
                context.databaseQueryOrderBy = (String) parentContextMap.get("databaseQueryOrderBy");
            }if (parentContextMap.containsKey("databaseQuerySelect")) {
                context.databaseQuerySelect = (String) parentContextMap.get("databaseQuerySelect");
            }if (parentContextMap.containsKey("databaseTableName_HUE")) {
                context.databaseTableName_HUE = (String) parentContextMap.get("databaseTableName_HUE");
            }if (parentContextMap.containsKey("databaseTableName_TER")) {
                context.databaseTableName_TER = (String) parentContextMap.get("databaseTableName_TER");
            }if (parentContextMap.containsKey("databaseTableName_ZGZ")) {
                context.databaseTableName_ZGZ = (String) parentContextMap.get("databaseTableName_ZGZ");
            }if (parentContextMap.containsKey("docsEncoding")) {
                context.docsEncoding = (String) parentContextMap.get("docsEncoding");
            }if (parentContextMap.containsKey("inOutXlsSheetName_HUE")) {
                context.inOutXlsSheetName_HUE = (String) parentContextMap.get("inOutXlsSheetName_HUE");
            }if (parentContextMap.containsKey("inOutXlsSheetName_TER")) {
                context.inOutXlsSheetName_TER = (String) parentContextMap.get("inOutXlsSheetName_TER");
            }if (parentContextMap.containsKey("inOutXlsSheetName_ZGZ")) {
                context.inOutXlsSheetName_ZGZ = (String) parentContextMap.get("inOutXlsSheetName_ZGZ");
            }if (parentContextMap.containsKey("inXlsOriginalDocName_HUE")) {
                context.inXlsOriginalDocName_HUE = (String) parentContextMap.get("inXlsOriginalDocName_HUE");
            }if (parentContextMap.containsKey("inXlsOriginalDocName_TER")) {
                context.inXlsOriginalDocName_TER = (String) parentContextMap.get("inXlsOriginalDocName_TER");
            }if (parentContextMap.containsKey("inXlsOriginalDocName_ZGZ")) {
                context.inXlsOriginalDocName_ZGZ = (String) parentContextMap.get("inXlsOriginalDocName_ZGZ");
            }if (parentContextMap.containsKey("inXlsOriginalDocPath_HUE")) {
                context.inXlsOriginalDocPath_HUE = (String) parentContextMap.get("inXlsOriginalDocPath_HUE");
            }if (parentContextMap.containsKey("inXlsOriginalDocPath_TER")) {
                context.inXlsOriginalDocPath_TER = (String) parentContextMap.get("inXlsOriginalDocPath_TER");
            }if (parentContextMap.containsKey("inXlsOriginalDocPath_ZGZ")) {
                context.inXlsOriginalDocPath_ZGZ = (String) parentContextMap.get("inXlsOriginalDocPath_ZGZ");
            }if (parentContextMap.containsKey("inXlsUpdateDocName_HUE")) {
                context.inXlsUpdateDocName_HUE = (String) parentContextMap.get("inXlsUpdateDocName_HUE");
            }if (parentContextMap.containsKey("inXlsUpdateDocName_TER")) {
                context.inXlsUpdateDocName_TER = (String) parentContextMap.get("inXlsUpdateDocName_TER");
            }if (parentContextMap.containsKey("inXlsUpdateDocName_ZGZ")) {
                context.inXlsUpdateDocName_ZGZ = (String) parentContextMap.get("inXlsUpdateDocName_ZGZ");
            }if (parentContextMap.containsKey("inXlsUpdateDocPath_HUE")) {
                context.inXlsUpdateDocPath_HUE = (String) parentContextMap.get("inXlsUpdateDocPath_HUE");
            }if (parentContextMap.containsKey("inXlsUpdateDocPath_TER")) {
                context.inXlsUpdateDocPath_TER = (String) parentContextMap.get("inXlsUpdateDocPath_TER");
            }if (parentContextMap.containsKey("inXlsUpdateDocPath_ZGZ")) {
                context.inXlsUpdateDocPath_ZGZ = (String) parentContextMap.get("inXlsUpdateDocPath_ZGZ");
            }if (parentContextMap.containsKey("logConfigFile")) {
                context.logConfigFile = (String) parentContextMap.get("logConfigFile");
            }if (parentContextMap.containsKey("logOutFile")) {
                context.logOutFile = (String) parentContextMap.get("logOutFile");
            }if (parentContextMap.containsKey("logOutPath")) {
                context.logOutPath = (String) parentContextMap.get("logOutPath");
            }if (parentContextMap.containsKey("outCsvDocName_HUE")) {
                context.outCsvDocName_HUE = (String) parentContextMap.get("outCsvDocName_HUE");
            }if (parentContextMap.containsKey("outCsvDocName_TER")) {
                context.outCsvDocName_TER = (String) parentContextMap.get("outCsvDocName_TER");
            }if (parentContextMap.containsKey("outCsvDocName_ZGZ")) {
                context.outCsvDocName_ZGZ = (String) parentContextMap.get("outCsvDocName_ZGZ");
            }if (parentContextMap.containsKey("outDocsPath_HUE")) {
                context.outDocsPath_HUE = (String) parentContextMap.get("outDocsPath_HUE");
            }if (parentContextMap.containsKey("outDocsPath_TER")) {
                context.outDocsPath_TER = (String) parentContextMap.get("outDocsPath_TER");
            }if (parentContextMap.containsKey("outDocsPath_ZGZ")) {
                context.outDocsPath_ZGZ = (String) parentContextMap.get("outDocsPath_ZGZ");
            }if (parentContextMap.containsKey("outIcsDocHeaderPropertyProdId_HUE")) {
                context.outIcsDocHeaderPropertyProdId_HUE = (String) parentContextMap.get("outIcsDocHeaderPropertyProdId_HUE");
            }if (parentContextMap.containsKey("outIcsDocHeaderPropertyProdId_TER")) {
                context.outIcsDocHeaderPropertyProdId_TER = (String) parentContextMap.get("outIcsDocHeaderPropertyProdId_TER");
            }if (parentContextMap.containsKey("outIcsDocHeaderPropertyProdId_ZGZ")) {
                context.outIcsDocHeaderPropertyProdId_ZGZ = (String) parentContextMap.get("outIcsDocHeaderPropertyProdId_ZGZ");
            }if (parentContextMap.containsKey("outIcsDocName_HUE")) {
                context.outIcsDocName_HUE = (String) parentContextMap.get("outIcsDocName_HUE");
            }if (parentContextMap.containsKey("outIcsDocName_TER")) {
                context.outIcsDocName_TER = (String) parentContextMap.get("outIcsDocName_TER");
            }if (parentContextMap.containsKey("outIcsDocName_ZGZ")) {
                context.outIcsDocName_ZGZ = (String) parentContextMap.get("outIcsDocName_ZGZ");
            }if (parentContextMap.containsKey("outJsonDocDataBlock_HUE")) {
                context.outJsonDocDataBlock_HUE = (String) parentContextMap.get("outJsonDocDataBlock_HUE");
            }if (parentContextMap.containsKey("outJsonDocDataBlock_TER")) {
                context.outJsonDocDataBlock_TER = (String) parentContextMap.get("outJsonDocDataBlock_TER");
            }if (parentContextMap.containsKey("outJsonDocDataBlock_ZGZ")) {
                context.outJsonDocDataBlock_ZGZ = (String) parentContextMap.get("outJsonDocDataBlock_ZGZ");
            }if (parentContextMap.containsKey("outJsonDocName_HUE")) {
                context.outJsonDocName_HUE = (String) parentContextMap.get("outJsonDocName_HUE");
            }if (parentContextMap.containsKey("outJsonDocName_TER")) {
                context.outJsonDocName_TER = (String) parentContextMap.get("outJsonDocName_TER");
            }if (parentContextMap.containsKey("outJsonDocName_ZGZ")) {
                context.outJsonDocName_ZGZ = (String) parentContextMap.get("outJsonDocName_ZGZ");
            }if (parentContextMap.containsKey("outXlsDocName_HUE")) {
                context.outXlsDocName_HUE = (String) parentContextMap.get("outXlsDocName_HUE");
            }if (parentContextMap.containsKey("outXlsDocName_TER")) {
                context.outXlsDocName_TER = (String) parentContextMap.get("outXlsDocName_TER");
            }if (parentContextMap.containsKey("outXlsDocName_ZGZ")) {
                context.outXlsDocName_ZGZ = (String) parentContextMap.get("outXlsDocName_ZGZ");
            }if (parentContextMap.containsKey("outXmlDocName_HUE")) {
                context.outXmlDocName_HUE = (String) parentContextMap.get("outXmlDocName_HUE");
            }if (parentContextMap.containsKey("outXmlDocName_TER")) {
                context.outXmlDocName_TER = (String) parentContextMap.get("outXmlDocName_TER");
            }if (parentContextMap.containsKey("outXmlDocName_ZGZ")) {
                context.outXmlDocName_ZGZ = (String) parentContextMap.get("outXmlDocName_ZGZ");
            }if (parentContextMap.containsKey("outXmlDocRootTag_HUE")) {
                context.outXmlDocRootTag_HUE = (String) parentContextMap.get("outXmlDocRootTag_HUE");
            }if (parentContextMap.containsKey("outXmlDocRootTag_TER")) {
                context.outXmlDocRootTag_TER = (String) parentContextMap.get("outXmlDocRootTag_TER");
            }if (parentContextMap.containsKey("outXmlDocRootTag_ZGZ")) {
                context.outXmlDocRootTag_ZGZ = (String) parentContextMap.get("outXmlDocRootTag_ZGZ");
            }if (parentContextMap.containsKey("outXmlDocRowTag")) {
                context.outXmlDocRowTag = (String) parentContextMap.get("outXmlDocRowTag");
            }if (parentContextMap.containsKey("databaseTableName")) {
                context.databaseTableName = (String) parentContextMap.get("databaseTableName");
            }if (parentContextMap.containsKey("etlConfName")) {
                context.etlConfName = (String) parentContextMap.get("etlConfName");
            }if (parentContextMap.containsKey("etlConfPath")) {
                context.etlConfPath = (String) parentContextMap.get("etlConfPath");
            }if (parentContextMap.containsKey("inOutXlsSheetName")) {
                context.inOutXlsSheetName = (String) parentContextMap.get("inOutXlsSheetName");
            }if (parentContextMap.containsKey("inXlsOriginalDocName")) {
                context.inXlsOriginalDocName = (String) parentContextMap.get("inXlsOriginalDocName");
            }if (parentContextMap.containsKey("inXlsOriginalDocPath")) {
                context.inXlsOriginalDocPath = (String) parentContextMap.get("inXlsOriginalDocPath");
            }if (parentContextMap.containsKey("inXlsUpdateDocName")) {
                context.inXlsUpdateDocName = (String) parentContextMap.get("inXlsUpdateDocName");
            }if (parentContextMap.containsKey("inXlsUpdateDocPath")) {
                context.inXlsUpdateDocPath = (String) parentContextMap.get("inXlsUpdateDocPath");
            }if (parentContextMap.containsKey("outCsvDocName")) {
                context.outCsvDocName = (String) parentContextMap.get("outCsvDocName");
            }if (parentContextMap.containsKey("outDocsPath")) {
                context.outDocsPath = (String) parentContextMap.get("outDocsPath");
            }if (parentContextMap.containsKey("outIcsDocHeaderPropertyProdId")) {
                context.outIcsDocHeaderPropertyProdId = (String) parentContextMap.get("outIcsDocHeaderPropertyProdId");
            }if (parentContextMap.containsKey("outIcsDocName")) {
                context.outIcsDocName = (String) parentContextMap.get("outIcsDocName");
            }if (parentContextMap.containsKey("outJsonDocDataBlock")) {
                context.outJsonDocDataBlock = (String) parentContextMap.get("outJsonDocDataBlock");
            }if (parentContextMap.containsKey("outJsonDocName")) {
                context.outJsonDocName = (String) parentContextMap.get("outJsonDocName");
            }if (parentContextMap.containsKey("outXlsDocName")) {
                context.outXlsDocName = (String) parentContextMap.get("outXlsDocName");
            }if (parentContextMap.containsKey("outXmlDocName")) {
                context.outXmlDocName = (String) parentContextMap.get("outXmlDocName");
            }if (parentContextMap.containsKey("outXmlDocRootTag")) {
                context.outXmlDocRootTag = (String) parentContextMap.get("outXmlDocRootTag");
            }if (parentContextMap.containsKey("provincesToLoad")) {
                context.provincesToLoad = (String) parentContextMap.get("provincesToLoad");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : AOD_Festivos");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }




		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     158307 characters generated by Talend Open Studio for Data Integration 
 *     on the 4 de mayo de 2017 13:54:52 CEST
 ************************************************************************************************/