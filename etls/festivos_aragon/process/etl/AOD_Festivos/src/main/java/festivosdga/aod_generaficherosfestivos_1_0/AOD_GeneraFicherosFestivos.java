// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package festivosdga.aod_generaficherosfestivos_1_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tLibraryLoad_1
	


	//the import part of tJava_1
	import net.fortuna.ical4j.model.property.CalScale;
import net.fortuna.ical4j.model.property.ProdId;
import net.fortuna.ical4j.model.property.Version;

	//the import part of tJavaRow_1
	import net.fortuna.ical4j.model.component.VEvent;
import net.fortuna.ical4j.model.Property;
import net.fortuna.ical4j.model.parameter.Value;
import net.fortuna.ical4j.util.UidGenerator;

	//the import part of tJava_2
	import java.io.FileOutputStream;
import net.fortuna.ical4j.data.CalendarOutputter;


@SuppressWarnings("unused")

/**
 * Job: AOD_GeneraFicherosFestivos Purpose: Actualizar festivos seg√∫n provincia<br>
 * Description: Actualizar los festivos de la provincia o provincias elegidas y generar sus correspondientes ficheros csv, xml, json, xls e ics <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status TEST
 */
public class AOD_GeneraFicherosFestivos implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(databaseAdditionalParams != null){
				
					this.setProperty("databaseAdditionalParams", databaseAdditionalParams.toString());
				
			}
			
			if(databaseConnectionHost != null){
				
					this.setProperty("databaseConnectionHost", databaseConnectionHost.toString());
				
			}
			
			if(databaseConnectionPass != null){
				
					this.setProperty("databaseConnectionPass", databaseConnectionPass.toString());
				
			}
			
			if(databaseConnectionPort != null){
				
					this.setProperty("databaseConnectionPort", databaseConnectionPort.toString());
				
			}
			
			if(databaseConnectionUser != null){
				
					this.setProperty("databaseConnectionUser", databaseConnectionUser.toString());
				
			}
			
			if(databaseName != null){
				
					this.setProperty("databaseName", databaseName.toString());
				
			}
			
			if(databasePath != null){
				
					this.setProperty("databasePath", databasePath.toString());
				
			}
			
			if(databaseQueryOrderBy != null){
				
					this.setProperty("databaseQueryOrderBy", databaseQueryOrderBy.toString());
				
			}
			
			if(databaseQuerySelect != null){
				
					this.setProperty("databaseQuerySelect", databaseQuerySelect.toString());
				
			}
			
			if(databaseTableName_HUE != null){
				
					this.setProperty("databaseTableName_HUE", databaseTableName_HUE.toString());
				
			}
			
			if(databaseTableName_TER != null){
				
					this.setProperty("databaseTableName_TER", databaseTableName_TER.toString());
				
			}
			
			if(databaseTableName_ZGZ != null){
				
					this.setProperty("databaseTableName_ZGZ", databaseTableName_ZGZ.toString());
				
			}
			
			if(docsEncoding != null){
				
					this.setProperty("docsEncoding", docsEncoding.toString());
				
			}
			
			if(inOutXlsSheetName_HUE != null){
				
					this.setProperty("inOutXlsSheetName_HUE", inOutXlsSheetName_HUE.toString());
				
			}
			
			if(inOutXlsSheetName_TER != null){
				
					this.setProperty("inOutXlsSheetName_TER", inOutXlsSheetName_TER.toString());
				
			}
			
			if(inOutXlsSheetName_ZGZ != null){
				
					this.setProperty("inOutXlsSheetName_ZGZ", inOutXlsSheetName_ZGZ.toString());
				
			}
			
			if(inXlsOriginalDocName_HUE != null){
				
					this.setProperty("inXlsOriginalDocName_HUE", inXlsOriginalDocName_HUE.toString());
				
			}
			
			if(inXlsOriginalDocName_TER != null){
				
					this.setProperty("inXlsOriginalDocName_TER", inXlsOriginalDocName_TER.toString());
				
			}
			
			if(inXlsOriginalDocName_ZGZ != null){
				
					this.setProperty("inXlsOriginalDocName_ZGZ", inXlsOriginalDocName_ZGZ.toString());
				
			}
			
			if(inXlsOriginalDocPath_HUE != null){
				
					this.setProperty("inXlsOriginalDocPath_HUE", inXlsOriginalDocPath_HUE.toString());
				
			}
			
			if(inXlsOriginalDocPath_TER != null){
				
					this.setProperty("inXlsOriginalDocPath_TER", inXlsOriginalDocPath_TER.toString());
				
			}
			
			if(inXlsOriginalDocPath_ZGZ != null){
				
					this.setProperty("inXlsOriginalDocPath_ZGZ", inXlsOriginalDocPath_ZGZ.toString());
				
			}
			
			if(inXlsUpdateDocName_HUE != null){
				
					this.setProperty("inXlsUpdateDocName_HUE", inXlsUpdateDocName_HUE.toString());
				
			}
			
			if(inXlsUpdateDocName_TER != null){
				
					this.setProperty("inXlsUpdateDocName_TER", inXlsUpdateDocName_TER.toString());
				
			}
			
			if(inXlsUpdateDocName_ZGZ != null){
				
					this.setProperty("inXlsUpdateDocName_ZGZ", inXlsUpdateDocName_ZGZ.toString());
				
			}
			
			if(inXlsUpdateDocPath_HUE != null){
				
					this.setProperty("inXlsUpdateDocPath_HUE", inXlsUpdateDocPath_HUE.toString());
				
			}
			
			if(inXlsUpdateDocPath_TER != null){
				
					this.setProperty("inXlsUpdateDocPath_TER", inXlsUpdateDocPath_TER.toString());
				
			}
			
			if(inXlsUpdateDocPath_ZGZ != null){
				
					this.setProperty("inXlsUpdateDocPath_ZGZ", inXlsUpdateDocPath_ZGZ.toString());
				
			}
			
			if(logConfigFile != null){
				
					this.setProperty("logConfigFile", logConfigFile.toString());
				
			}
			
			if(logOutFile != null){
				
					this.setProperty("logOutFile", logOutFile.toString());
				
			}
			
			if(logOutPath != null){
				
					this.setProperty("logOutPath", logOutPath.toString());
				
			}
			
			if(outCsvDocName_HUE != null){
				
					this.setProperty("outCsvDocName_HUE", outCsvDocName_HUE.toString());
				
			}
			
			if(outCsvDocName_TER != null){
				
					this.setProperty("outCsvDocName_TER", outCsvDocName_TER.toString());
				
			}
			
			if(outCsvDocName_ZGZ != null){
				
					this.setProperty("outCsvDocName_ZGZ", outCsvDocName_ZGZ.toString());
				
			}
			
			if(outDocsPath_HUE != null){
				
					this.setProperty("outDocsPath_HUE", outDocsPath_HUE.toString());
				
			}
			
			if(outDocsPath_TER != null){
				
					this.setProperty("outDocsPath_TER", outDocsPath_TER.toString());
				
			}
			
			if(outDocsPath_ZGZ != null){
				
					this.setProperty("outDocsPath_ZGZ", outDocsPath_ZGZ.toString());
				
			}
			
			if(outIcsDocHeaderPropertyProdId_HUE != null){
				
					this.setProperty("outIcsDocHeaderPropertyProdId_HUE", outIcsDocHeaderPropertyProdId_HUE.toString());
				
			}
			
			if(outIcsDocHeaderPropertyProdId_TER != null){
				
					this.setProperty("outIcsDocHeaderPropertyProdId_TER", outIcsDocHeaderPropertyProdId_TER.toString());
				
			}
			
			if(outIcsDocHeaderPropertyProdId_ZGZ != null){
				
					this.setProperty("outIcsDocHeaderPropertyProdId_ZGZ", outIcsDocHeaderPropertyProdId_ZGZ.toString());
				
			}
			
			if(outIcsDocName_HUE != null){
				
					this.setProperty("outIcsDocName_HUE", outIcsDocName_HUE.toString());
				
			}
			
			if(outIcsDocName_TER != null){
				
					this.setProperty("outIcsDocName_TER", outIcsDocName_TER.toString());
				
			}
			
			if(outIcsDocName_ZGZ != null){
				
					this.setProperty("outIcsDocName_ZGZ", outIcsDocName_ZGZ.toString());
				
			}
			
			if(outJsonDocDataBlock_HUE != null){
				
					this.setProperty("outJsonDocDataBlock_HUE", outJsonDocDataBlock_HUE.toString());
				
			}
			
			if(outJsonDocDataBlock_TER != null){
				
					this.setProperty("outJsonDocDataBlock_TER", outJsonDocDataBlock_TER.toString());
				
			}
			
			if(outJsonDocDataBlock_ZGZ != null){
				
					this.setProperty("outJsonDocDataBlock_ZGZ", outJsonDocDataBlock_ZGZ.toString());
				
			}
			
			if(outJsonDocName_HUE != null){
				
					this.setProperty("outJsonDocName_HUE", outJsonDocName_HUE.toString());
				
			}
			
			if(outJsonDocName_TER != null){
				
					this.setProperty("outJsonDocName_TER", outJsonDocName_TER.toString());
				
			}
			
			if(outJsonDocName_ZGZ != null){
				
					this.setProperty("outJsonDocName_ZGZ", outJsonDocName_ZGZ.toString());
				
			}
			
			if(outXlsDocName_HUE != null){
				
					this.setProperty("outXlsDocName_HUE", outXlsDocName_HUE.toString());
				
			}
			
			if(outXlsDocName_TER != null){
				
					this.setProperty("outXlsDocName_TER", outXlsDocName_TER.toString());
				
			}
			
			if(outXlsDocName_ZGZ != null){
				
					this.setProperty("outXlsDocName_ZGZ", outXlsDocName_ZGZ.toString());
				
			}
			
			if(outXmlDocName_HUE != null){
				
					this.setProperty("outXmlDocName_HUE", outXmlDocName_HUE.toString());
				
			}
			
			if(outXmlDocName_TER != null){
				
					this.setProperty("outXmlDocName_TER", outXmlDocName_TER.toString());
				
			}
			
			if(outXmlDocName_ZGZ != null){
				
					this.setProperty("outXmlDocName_ZGZ", outXmlDocName_ZGZ.toString());
				
			}
			
			if(outXmlDocRootTag_HUE != null){
				
					this.setProperty("outXmlDocRootTag_HUE", outXmlDocRootTag_HUE.toString());
				
			}
			
			if(outXmlDocRootTag_TER != null){
				
					this.setProperty("outXmlDocRootTag_TER", outXmlDocRootTag_TER.toString());
				
			}
			
			if(outXmlDocRootTag_ZGZ != null){
				
					this.setProperty("outXmlDocRootTag_ZGZ", outXmlDocRootTag_ZGZ.toString());
				
			}
			
			if(outXmlDocRowTag != null){
				
					this.setProperty("outXmlDocRowTag", outXmlDocRowTag.toString());
				
			}
			
			if(databaseTableName != null){
				
					this.setProperty("databaseTableName", databaseTableName.toString());
				
			}
			
			if(etlConfName != null){
				
					this.setProperty("etlConfName", etlConfName.toString());
				
			}
			
			if(etlConfPath != null){
				
					this.setProperty("etlConfPath", etlConfPath.toString());
				
			}
			
			if(inOutXlsSheetName != null){
				
					this.setProperty("inOutXlsSheetName", inOutXlsSheetName.toString());
				
			}
			
			if(inXlsOriginalDocName != null){
				
					this.setProperty("inXlsOriginalDocName", inXlsOriginalDocName.toString());
				
			}
			
			if(inXlsOriginalDocPath != null){
				
					this.setProperty("inXlsOriginalDocPath", inXlsOriginalDocPath.toString());
				
			}
			
			if(inXlsUpdateDocName != null){
				
					this.setProperty("inXlsUpdateDocName", inXlsUpdateDocName.toString());
				
			}
			
			if(inXlsUpdateDocPath != null){
				
					this.setProperty("inXlsUpdateDocPath", inXlsUpdateDocPath.toString());
				
			}
			
			if(outCsvDocName != null){
				
					this.setProperty("outCsvDocName", outCsvDocName.toString());
				
			}
			
			if(outDocsPath != null){
				
					this.setProperty("outDocsPath", outDocsPath.toString());
				
			}
			
			if(outIcsDocHeaderPropertyProdId != null){
				
					this.setProperty("outIcsDocHeaderPropertyProdId", outIcsDocHeaderPropertyProdId.toString());
				
			}
			
			if(outIcsDocName != null){
				
					this.setProperty("outIcsDocName", outIcsDocName.toString());
				
			}
			
			if(outJsonDocDataBlock != null){
				
					this.setProperty("outJsonDocDataBlock", outJsonDocDataBlock.toString());
				
			}
			
			if(outJsonDocName != null){
				
					this.setProperty("outJsonDocName", outJsonDocName.toString());
				
			}
			
			if(outXlsDocName != null){
				
					this.setProperty("outXlsDocName", outXlsDocName.toString());
				
			}
			
			if(outXmlDocName != null){
				
					this.setProperty("outXmlDocName", outXmlDocName.toString());
				
			}
			
			if(outXmlDocRootTag != null){
				
					this.setProperty("outXmlDocRootTag", outXmlDocRootTag.toString());
				
			}
			
			if(provincesToLoad != null){
				
					this.setProperty("provincesToLoad", provincesToLoad.toString());
				
			}
			
		}

public String databaseAdditionalParams;
public String getDatabaseAdditionalParams(){
	return this.databaseAdditionalParams;
}
public String databaseConnectionHost;
public String getDatabaseConnectionHost(){
	return this.databaseConnectionHost;
}
public String databaseConnectionPass;
public String getDatabaseConnectionPass(){
	return this.databaseConnectionPass;
}
public String databaseConnectionPort;
public String getDatabaseConnectionPort(){
	return this.databaseConnectionPort;
}
public String databaseConnectionUser;
public String getDatabaseConnectionUser(){
	return this.databaseConnectionUser;
}
public String databaseName;
public String getDatabaseName(){
	return this.databaseName;
}
public String databasePath;
public String getDatabasePath(){
	return this.databasePath;
}
public String databaseQueryOrderBy;
public String getDatabaseQueryOrderBy(){
	return this.databaseQueryOrderBy;
}
public String databaseQuerySelect;
public String getDatabaseQuerySelect(){
	return this.databaseQuerySelect;
}
public String databaseTableName_HUE;
public String getDatabaseTableName_HUE(){
	return this.databaseTableName_HUE;
}
public String databaseTableName_TER;
public String getDatabaseTableName_TER(){
	return this.databaseTableName_TER;
}
public String databaseTableName_ZGZ;
public String getDatabaseTableName_ZGZ(){
	return this.databaseTableName_ZGZ;
}
public String docsEncoding;
public String getDocsEncoding(){
	return this.docsEncoding;
}
public String inOutXlsSheetName_HUE;
public String getInOutXlsSheetName_HUE(){
	return this.inOutXlsSheetName_HUE;
}
public String inOutXlsSheetName_TER;
public String getInOutXlsSheetName_TER(){
	return this.inOutXlsSheetName_TER;
}
public String inOutXlsSheetName_ZGZ;
public String getInOutXlsSheetName_ZGZ(){
	return this.inOutXlsSheetName_ZGZ;
}
public String inXlsOriginalDocName_HUE;
public String getInXlsOriginalDocName_HUE(){
	return this.inXlsOriginalDocName_HUE;
}
public String inXlsOriginalDocName_TER;
public String getInXlsOriginalDocName_TER(){
	return this.inXlsOriginalDocName_TER;
}
public String inXlsOriginalDocName_ZGZ;
public String getInXlsOriginalDocName_ZGZ(){
	return this.inXlsOriginalDocName_ZGZ;
}
public String inXlsOriginalDocPath_HUE;
public String getInXlsOriginalDocPath_HUE(){
	return this.inXlsOriginalDocPath_HUE;
}
public String inXlsOriginalDocPath_TER;
public String getInXlsOriginalDocPath_TER(){
	return this.inXlsOriginalDocPath_TER;
}
public String inXlsOriginalDocPath_ZGZ;
public String getInXlsOriginalDocPath_ZGZ(){
	return this.inXlsOriginalDocPath_ZGZ;
}
public String inXlsUpdateDocName_HUE;
public String getInXlsUpdateDocName_HUE(){
	return this.inXlsUpdateDocName_HUE;
}
public String inXlsUpdateDocName_TER;
public String getInXlsUpdateDocName_TER(){
	return this.inXlsUpdateDocName_TER;
}
public String inXlsUpdateDocName_ZGZ;
public String getInXlsUpdateDocName_ZGZ(){
	return this.inXlsUpdateDocName_ZGZ;
}
public String inXlsUpdateDocPath_HUE;
public String getInXlsUpdateDocPath_HUE(){
	return this.inXlsUpdateDocPath_HUE;
}
public String inXlsUpdateDocPath_TER;
public String getInXlsUpdateDocPath_TER(){
	return this.inXlsUpdateDocPath_TER;
}
public String inXlsUpdateDocPath_ZGZ;
public String getInXlsUpdateDocPath_ZGZ(){
	return this.inXlsUpdateDocPath_ZGZ;
}
public String logConfigFile;
public String getLogConfigFile(){
	return this.logConfigFile;
}
public String logOutFile;
public String getLogOutFile(){
	return this.logOutFile;
}
public String logOutPath;
public String getLogOutPath(){
	return this.logOutPath;
}
public String outCsvDocName_HUE;
public String getOutCsvDocName_HUE(){
	return this.outCsvDocName_HUE;
}
public String outCsvDocName_TER;
public String getOutCsvDocName_TER(){
	return this.outCsvDocName_TER;
}
public String outCsvDocName_ZGZ;
public String getOutCsvDocName_ZGZ(){
	return this.outCsvDocName_ZGZ;
}
public String outDocsPath_HUE;
public String getOutDocsPath_HUE(){
	return this.outDocsPath_HUE;
}
public String outDocsPath_TER;
public String getOutDocsPath_TER(){
	return this.outDocsPath_TER;
}
public String outDocsPath_ZGZ;
public String getOutDocsPath_ZGZ(){
	return this.outDocsPath_ZGZ;
}
public String outIcsDocHeaderPropertyProdId_HUE;
public String getOutIcsDocHeaderPropertyProdId_HUE(){
	return this.outIcsDocHeaderPropertyProdId_HUE;
}
public String outIcsDocHeaderPropertyProdId_TER;
public String getOutIcsDocHeaderPropertyProdId_TER(){
	return this.outIcsDocHeaderPropertyProdId_TER;
}
public String outIcsDocHeaderPropertyProdId_ZGZ;
public String getOutIcsDocHeaderPropertyProdId_ZGZ(){
	return this.outIcsDocHeaderPropertyProdId_ZGZ;
}
public String outIcsDocName_HUE;
public String getOutIcsDocName_HUE(){
	return this.outIcsDocName_HUE;
}
public String outIcsDocName_TER;
public String getOutIcsDocName_TER(){
	return this.outIcsDocName_TER;
}
public String outIcsDocName_ZGZ;
public String getOutIcsDocName_ZGZ(){
	return this.outIcsDocName_ZGZ;
}
public String outJsonDocDataBlock_HUE;
public String getOutJsonDocDataBlock_HUE(){
	return this.outJsonDocDataBlock_HUE;
}
public String outJsonDocDataBlock_TER;
public String getOutJsonDocDataBlock_TER(){
	return this.outJsonDocDataBlock_TER;
}
public String outJsonDocDataBlock_ZGZ;
public String getOutJsonDocDataBlock_ZGZ(){
	return this.outJsonDocDataBlock_ZGZ;
}
public String outJsonDocName_HUE;
public String getOutJsonDocName_HUE(){
	return this.outJsonDocName_HUE;
}
public String outJsonDocName_TER;
public String getOutJsonDocName_TER(){
	return this.outJsonDocName_TER;
}
public String outJsonDocName_ZGZ;
public String getOutJsonDocName_ZGZ(){
	return this.outJsonDocName_ZGZ;
}
public String outXlsDocName_HUE;
public String getOutXlsDocName_HUE(){
	return this.outXlsDocName_HUE;
}
public String outXlsDocName_TER;
public String getOutXlsDocName_TER(){
	return this.outXlsDocName_TER;
}
public String outXlsDocName_ZGZ;
public String getOutXlsDocName_ZGZ(){
	return this.outXlsDocName_ZGZ;
}
public String outXmlDocName_HUE;
public String getOutXmlDocName_HUE(){
	return this.outXmlDocName_HUE;
}
public String outXmlDocName_TER;
public String getOutXmlDocName_TER(){
	return this.outXmlDocName_TER;
}
public String outXmlDocName_ZGZ;
public String getOutXmlDocName_ZGZ(){
	return this.outXmlDocName_ZGZ;
}
public String outXmlDocRootTag_HUE;
public String getOutXmlDocRootTag_HUE(){
	return this.outXmlDocRootTag_HUE;
}
public String outXmlDocRootTag_TER;
public String getOutXmlDocRootTag_TER(){
	return this.outXmlDocRootTag_TER;
}
public String outXmlDocRootTag_ZGZ;
public String getOutXmlDocRootTag_ZGZ(){
	return this.outXmlDocRootTag_ZGZ;
}
public String outXmlDocRowTag;
public String getOutXmlDocRowTag(){
	return this.outXmlDocRowTag;
}
public String databaseTableName;
public String getDatabaseTableName(){
	return this.databaseTableName;
}
public String etlConfName;
public String getEtlConfName(){
	return this.etlConfName;
}
public String etlConfPath;
public String getEtlConfPath(){
	return this.etlConfPath;
}
public String inOutXlsSheetName;
public String getInOutXlsSheetName(){
	return this.inOutXlsSheetName;
}
public String inXlsOriginalDocName;
public String getInXlsOriginalDocName(){
	return this.inXlsOriginalDocName;
}
public String inXlsOriginalDocPath;
public String getInXlsOriginalDocPath(){
	return this.inXlsOriginalDocPath;
}
public String inXlsUpdateDocName;
public String getInXlsUpdateDocName(){
	return this.inXlsUpdateDocName;
}
public String inXlsUpdateDocPath;
public String getInXlsUpdateDocPath(){
	return this.inXlsUpdateDocPath;
}
public String outCsvDocName;
public String getOutCsvDocName(){
	return this.outCsvDocName;
}
public String outDocsPath;
public String getOutDocsPath(){
	return this.outDocsPath;
}
public String outIcsDocHeaderPropertyProdId;
public String getOutIcsDocHeaderPropertyProdId(){
	return this.outIcsDocHeaderPropertyProdId;
}
public String outIcsDocName;
public String getOutIcsDocName(){
	return this.outIcsDocName;
}
public String outJsonDocDataBlock;
public String getOutJsonDocDataBlock(){
	return this.outJsonDocDataBlock;
}
public String outJsonDocName;
public String getOutJsonDocName(){
	return this.outJsonDocName;
}
public String outXlsDocName;
public String getOutXlsDocName(){
	return this.outXlsDocName;
}
public String outXmlDocName;
public String getOutXmlDocName(){
	return this.outXmlDocName;
}
public String outXmlDocRootTag;
public String getOutXmlDocRootTag(){
	return this.outXmlDocRootTag;
}
public String provincesToLoad;
public String getProvincesToLoad(){
	return this.provincesToLoad;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "1.0";
	private final String jobName = "AOD_GeneraFicherosFestivos";
	private final String projectName = "FESTIVOSDGA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				AOD_GeneraFicherosFestivos.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(AOD_GeneraFicherosFestivos.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHSQLDbOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHSQLDbOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLibraryLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHSQLDbInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHSQLDbInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHSQLDbInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHSQLDbInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputJSON_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHSQLDbInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHSQLDbInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHSQLDbInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHSQLDbInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHSQLDbInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHSQLDbInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLibraryLoad_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHSQLDbInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];
    static byte[] commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];

	
			    public long Codigo_INE;

				public long getCodigo_INE () {
					return this.Codigo_INE;
				}
				
			    public String Localidad;

				public String getLocalidad () {
					return this.Localidad;
				}
				
			    public java.util.Date Fecha;

				public java.util.Date getFecha () {
					return this.Fecha;
				}
				
			    public String Festividad;

				public String getFestividad () {
					return this.Festividad;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length) {
				if(length < 1024 && commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length == 0) {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[1024];
				} else {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length);
			strReturn = new String(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos) {

        	try {

        		int length = 0;
		
			        this.Codigo_INE = dis.readLong();
					
					this.Localidad = readString(dis);
					
					this.Fecha = readDate(dis);
					
					this.Festividad = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.Codigo_INE);
					
					// String
				
						writeString(this.Localidad,dos);
					
					// java.util.Date
				
						writeDate(this.Fecha,dos);
					
					// String
				
						writeString(this.Festividad,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Codigo_INE="+String.valueOf(Codigo_INE));
		sb.append(",Localidad="+Localidad);
		sb.append(",Fecha="+String.valueOf(Fecha));
		sb.append(",Festividad="+Festividad);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tHSQLDbOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHSQLDbOutput_1", false);
		start_Hash.put("tHSQLDbOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHSQLDbOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tHSQLDbOutput_1 = 0;
		
    	class BytesLimit65535_tHSQLDbOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHSQLDbOutput_1().limitLog4jByte();



	String url_tHSQLDbOutput_1 = null;
		url_tHSQLDbOutput_1 = "jdbc:hsqldb:file:" + context.databasePath + "/" + context.databaseName ;
		
		url_tHSQLDbOutput_1 += ";" + context.databaseAdditionalParams;

int nb_line_tHSQLDbOutput_1 = 0;
int nb_line_update_tHSQLDbOutput_1 = 0;
int nb_line_inserted_tHSQLDbOutput_1 = 0;
int nb_line_deleted_tHSQLDbOutput_1 = 0;
int nb_line_rejected_tHSQLDbOutput_1 = 0;

int deletedCount_tHSQLDbOutput_1=0;
int updatedCount_tHSQLDbOutput_1=0;
int insertedCount_tHSQLDbOutput_1=0;
int rejectedCount_tHSQLDbOutput_1=0;

String tableName_tHSQLDbOutput_1 = context.databaseTableName;
boolean whetherReject_tHSQLDbOutput_1 = false;
 
java.lang.Class.forName("org.hsqldb.jdbcDriver");
String dbUser_tHSQLDbOutput_1 = context.databaseConnectionUser;

	final String decryptedPassword_tHSQLDbOutput_1 = context.databaseConnectionPass; 

String dbPwd_tHSQLDbOutput_1 = decryptedPassword_tHSQLDbOutput_1;	
java.sql.Connection conn_tHSQLDbOutput_1 = java.sql.DriverManager.getConnection(url_tHSQLDbOutput_1, dbUser_tHSQLDbOutput_1, dbPwd_tHSQLDbOutput_1);
resourceMap.put("conn_tHSQLDbOutput_1", conn_tHSQLDbOutput_1);
conn_tHSQLDbOutput_1.setAutoCommit(false);
            java.sql.DatabaseMetaData dbMetaData_tHSQLDbOutput_1 = conn_tHSQLDbOutput_1.getMetaData();
            java.sql.ResultSet rsTable_tHSQLDbOutput_1 = dbMetaData_tHSQLDbOutput_1.getTables(null, null, null, new String[]{"TABLE"});
            boolean whetherExist_tHSQLDbOutput_1 = false;
            while(rsTable_tHSQLDbOutput_1.next()) {
                String table_tHSQLDbOutput_1 = rsTable_tHSQLDbOutput_1.getString("TABLE_NAME");
                if(table_tHSQLDbOutput_1.equalsIgnoreCase(context.databaseTableName)) {
                    whetherExist_tHSQLDbOutput_1 = true;
                    break;
                }
            }
                if(whetherExist_tHSQLDbOutput_1) {
                    java.sql.Statement stmtDrop_tHSQLDbOutput_1 = conn_tHSQLDbOutput_1.createStatement();
                    stmtDrop_tHSQLDbOutput_1.execute("DROP TABLE " + tableName_tHSQLDbOutput_1 + "");
                }
                java.sql.Statement stmtCreate_tHSQLDbOutput_1 = conn_tHSQLDbOutput_1.createStatement();
                stmtCreate_tHSQLDbOutput_1.execute("CREATE TABLE " + tableName_tHSQLDbOutput_1 + "(Codigo_INE BIGINT  not null ,Localidad VARCHAR(50)  ,Fecha DATE ,Festividad VARCHAR(100)  )");                
	    String insert_tHSQLDbOutput_1 = "INSERT INTO " + context.databaseTableName + " (Codigo_INE,Localidad,Fecha,Festividad) VALUES (?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tHSQLDbOutput_1 = conn_tHSQLDbOutput_1.prepareStatement(insert_tHSQLDbOutput_1);
	    
        
        int commitEvery_tHSQLDbOutput_1 = 10000;
        
        int commitCounter_tHSQLDbOutput_1 = 0;
        




 



/**
 * [tHSQLDbOutput_1 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_1", false);
		start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_1";

	
		int tos_count_tFileInputExcel_1 = 0;
		
    	class BytesLimit65535_tFileInputExcel_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_1().limitLog4jByte();



			class RegexUtil_tFileInputExcel_1 {

		    	public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

			        if(useRegex){//this part process the regex issue

				        jxl.Sheet[] sheets = workbook.getSheets();
				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (int i = 0; i < sheets.length; i++) {
				            String sheetName = sheets[i].getName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	jxl.Sheet sheet = workbook.getSheet(sheetName);
				            	if(sheet != null){
				                	list.add(sheet);
				                }
				            }
				        }

			        }else{
			        	jxl.Sheet sheet = workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, int index, boolean useRegex) {
			    	java.util.List<jxl.Sheet> list =  new java.util.ArrayList<jxl.Sheet>();
			    	jxl.Sheet sheet = workbook.getSheet(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}


		RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();
		final jxl.WorkbookSettings workbookSettings_tFileInputExcel_1 = new jxl.WorkbookSettings();
		workbookSettings_tFileInputExcel_1.setDrawingsDisabled(true);
        workbookSettings_tFileInputExcel_1.setEncoding(context.docsEncoding);

        Object source_tFileInputExcel_1 =context.inXlsOriginalDocPath + context.inXlsOriginalDocName;
        final jxl.Workbook workbook_tFileInputExcel_1;

        java.io.InputStream toClose_tFileInputExcel_1 = null;
        java.io.BufferedInputStream buffIStreamtFileInputExcel_1 = null;
        try {
            if(source_tFileInputExcel_1 instanceof java.io.InputStream){
        		toClose_tFileInputExcel_1 = (java.io.InputStream)source_tFileInputExcel_1;
        		buffIStreamtFileInputExcel_1 = new java.io.BufferedInputStream(toClose_tFileInputExcel_1);
        		workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_1, workbookSettings_tFileInputExcel_1);
            }else if(source_tFileInputExcel_1 instanceof String){
        		toClose_tFileInputExcel_1 = new java.io.FileInputStream(source_tFileInputExcel_1.toString());
        		buffIStreamtFileInputExcel_1 = new java.io.BufferedInputStream(toClose_tFileInputExcel_1);
        		workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_1, workbookSettings_tFileInputExcel_1);
            }else{
            	workbook_tFileInputExcel_1 = null;
            	throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
            }
        } finally {
			try{
			   if(buffIStreamtFileInputExcel_1 != null){
			   	  buffIStreamtFileInputExcel_1.close();
			   }
			}catch(Exception e){
			}
        }
        try {
		java.util.List<jxl.Sheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<jxl.Sheet>();
        sheetList_tFileInputExcel_1.addAll(regexUtil_tFileInputExcel_1.getSheets(workbook_tFileInputExcel_1, context.inOutXlsSheetName, false));
        if(sheetList_tFileInputExcel_1.size() <= 0){
        	throw new RuntimeException("Special sheets not exist!");
        }

        java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_1 = new java.util.ArrayList<jxl.Sheet>();
        for(jxl.Sheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1){
        	if(sheet_FilterNull_tFileInputExcel_1.getRows()>0){
        		sheet_FilterNullList_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
        	}
        }
		sheetList_tFileInputExcel_1 = sheet_FilterNullList_tFileInputExcel_1;
	if(sheetList_tFileInputExcel_1.size()>0){
        int nb_line_tFileInputExcel_1 = 0;

        int begin_line_tFileInputExcel_1 = 4;

        int footer_input_tFileInputExcel_1 = 0;

        int end_line_tFileInputExcel_1=0;
        for(jxl.Sheet sheet_tFileInputExcel_1:sheetList_tFileInputExcel_1){
        	end_line_tFileInputExcel_1+=sheet_tFileInputExcel_1.getRows();
        }
        end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
        int limit_tFileInputExcel_1 = -1;
        int start_column_tFileInputExcel_1 = 1-1;
        int end_column_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0).getColumns();
        Integer lastColumn_tFileInputExcel_1 = 4;
        if(lastColumn_tFileInputExcel_1!=null){
        	end_column_tFileInputExcel_1 = lastColumn_tFileInputExcel_1.intValue();
        }
        jxl.Cell[] row_tFileInputExcel_1 = null;
        jxl.Sheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
        int rowCount_tFileInputExcel_1 = 0;
        int sheetIndex_tFileInputExcel_1 = 0;
        int currentRows_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0).getRows();

        //for the number format
        java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat("#.####################################");
		char separatorChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols().getDecimalSeparator();
		
		
		
        for(int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++){

        	int emptyColumnCount_tFileInputExcel_1 = 0;

        	if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
        		break;
        	}

            while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
                rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
                sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(++sheetIndex_tFileInputExcel_1);
                currentRows_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRows();
            }
            if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
                row_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
            }
        	globalMap.put("tFileInputExcel_1_CURRENT_SHEET",sheet_tFileInputExcel_1.getName());
    		row1 = null;
					int tempRowLength_tFileInputExcel_1 = 4;
				
				int columnIndex_tFileInputExcel_1 = 0;
			
//
//end%>
			
			String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
			int actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 >	row_tFileInputExcel_1.length ? row_tFileInputExcel_1.length : end_column_tFileInputExcel_1;

				java.util.TimeZone zone_tFileInputExcel_1 = java.util.TimeZone.getTimeZone("GMT");
                java.text.SimpleDateFormat sdf_tFileInputExcel_1 = new java.text.SimpleDateFormat("dd-MM-yyyy");
                sdf_tFileInputExcel_1.setTimeZone(zone_tFileInputExcel_1);
                

			for(int i=0;i<tempRowLength_tFileInputExcel_1;i++){

				if(i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1){

				  jxl.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1[i + start_column_tFileInputExcel_1];
                        temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getContents();

				}else{
					temp_row_tFileInputExcel_1[i]="";
				}
			}

			boolean whetherReject_tFileInputExcel_1 = false;
			row1 = new row1Struct();
			int curColNum_tFileInputExcel_1 = -1;
			String curColName_tFileInputExcel_1 = "";
			try {
							columnIndex_tFileInputExcel_1 = 0;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Codigo_INE";
			row1.Codigo_INE = ParserUtils.parseTo_long(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim());
			}else {
				row1.Codigo_INE = 0;
				emptyColumnCount_tFileInputExcel_1++;
		}
							columnIndex_tFileInputExcel_1 = 1;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Localidad";
			row1.Localidad = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else {
				row1.Localidad = null;
				emptyColumnCount_tFileInputExcel_1++;
		}
							columnIndex_tFileInputExcel_1 = 2;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Fecha";
			if(2<actual_end_column_tFileInputExcel_1){
				try{
					java.util.Date dateGMT_tFileInputExcel_1 = ((jxl.DateCell)row_tFileInputExcel_1[columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1]).getDate();
					row1.Fecha = new java.util.Date(dateGMT_tFileInputExcel_1.getTime() - java.util.TimeZone.getDefault().getOffset(dateGMT_tFileInputExcel_1.getTime()));
				}catch(java.lang.Exception e){
					
					throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_1+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_1 + " )");
				}
			}
			}else {
				row1.Fecha = null;
				emptyColumnCount_tFileInputExcel_1++;
		}
							columnIndex_tFileInputExcel_1 = 3;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Festividad";
			row1.Festividad = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else {
				row1.Festividad = null;
				emptyColumnCount_tFileInputExcel_1++;
		}

        if(emptyColumnCount_tFileInputExcel_1 >= 4){
        	break; //if meet the empty row, there will break the iterate.
        }
			nb_line_tFileInputExcel_1++;
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputExcel_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }

					
		



 



/**
 * [tFileInputExcel_1 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 


	tos_count_tFileInputExcel_1++;

/**
 * [tFileInputExcel_1 main ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tHSQLDbOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHSQLDbOutput_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		
	



        whetherReject_tHSQLDbOutput_1 = false;
                    pstmt_tHSQLDbOutput_1.setLong(1, row1.Codigo_INE);

                    if(row1.Localidad == null) {
pstmt_tHSQLDbOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tHSQLDbOutput_1.setString(2, row1.Localidad);
}

                    if(row1.Fecha != null) {
pstmt_tHSQLDbOutput_1.setTimestamp(3, new java.sql.Timestamp(row1.Fecha.getTime()));
} else {
pstmt_tHSQLDbOutput_1.setNull(3, java.sql.Types.DATE);
}

                    if(row1.Festividad == null) {
pstmt_tHSQLDbOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tHSQLDbOutput_1.setString(4, row1.Festividad);
}

            try {
                insertedCount_tHSQLDbOutput_1 = insertedCount_tHSQLDbOutput_1 + pstmt_tHSQLDbOutput_1.executeUpdate();
                nb_line_tHSQLDbOutput_1++;
            } catch(java.lang.Exception e) {
                whetherReject_tHSQLDbOutput_1 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tHSQLDbOutput_1) {
            }
            commitCounter_tHSQLDbOutput_1++;
            
            if(commitEvery_tHSQLDbOutput_1 <= commitCounter_tHSQLDbOutput_1) {
            	
                conn_tHSQLDbOutput_1.commit();
				                
                commitCounter_tHSQLDbOutput_1=0;
            
            }
        

 


	tos_count_tHSQLDbOutput_1++;

/**
 * [tHSQLDbOutput_1 main ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_1_NB_LINE",nb_line_tFileInputExcel_1);
			
				}
			
		} finally { 
				
					if(!(source_tFileInputExcel_1 instanceof java.io.InputStream)){
						workbook_tFileInputExcel_1.close();
					}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_1", true);
end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());




/**
 * [tFileInputExcel_1 end ] stop
 */

	
	/**
	 * [tHSQLDbOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHSQLDbOutput_1";

	



    if (commitCounter_tHSQLDbOutput_1 > 0) {
        conn_tHSQLDbOutput_1.commit();
    }
        if(pstmt_tHSQLDbOutput_1 != null) {

            pstmt_tHSQLDbOutput_1.close();
            
        }        
	conn_tHSQLDbOutput_1 .close();
	
	resourceMap.put("finish_tHSQLDbOutput_1", true);
	
	nb_line_deleted_tHSQLDbOutput_1=nb_line_deleted_tHSQLDbOutput_1+ deletedCount_tHSQLDbOutput_1;
	nb_line_update_tHSQLDbOutput_1=nb_line_update_tHSQLDbOutput_1 + updatedCount_tHSQLDbOutput_1;
	nb_line_inserted_tHSQLDbOutput_1=nb_line_inserted_tHSQLDbOutput_1 + insertedCount_tHSQLDbOutput_1;
	nb_line_rejected_tHSQLDbOutput_1=nb_line_rejected_tHSQLDbOutput_1 + rejectedCount_tHSQLDbOutput_1;
	
        globalMap.put("tHSQLDbOutput_1_NB_LINE",nb_line_tHSQLDbOutput_1);
        globalMap.put("tHSQLDbOutput_1_NB_LINE_UPDATED",nb_line_update_tHSQLDbOutput_1);
        globalMap.put("tHSQLDbOutput_1_NB_LINE_INSERTED",nb_line_inserted_tHSQLDbOutput_1);
        globalMap.put("tHSQLDbOutput_1_NB_LINE_DELETED",nb_line_deleted_tHSQLDbOutput_1);
        globalMap.put("tHSQLDbOutput_1_NB_LINE_REJECTED", nb_line_rejected_tHSQLDbOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tHSQLDbOutput_1", true);
end_Hash.put("tHSQLDbOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputExcel_2Process(globalMap);



/**
 * [tHSQLDbOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 finally ] stop
 */

	
	/**
	 * [tHSQLDbOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHSQLDbOutput_1";

	



	
		if(resourceMap.get("finish_tHSQLDbOutput_1")==null){
			if(resourceMap.get("conn_tHSQLDbOutput_1")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tHSQLDbOutput_1")).close();
					
				} catch (java.sql.SQLException sqlEx_tHSQLDbOutput_1) {
					String errorMessage_tHSQLDbOutput_1 = "failed to close the connection in tHSQLDbOutput_1 :" + sqlEx_tHSQLDbOutput_1.getMessage();
					
					System.err.println(errorMessage_tHSQLDbOutput_1);
				}
			}
		}
	

 



/**
 * [tHSQLDbOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];
    static byte[] commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];

	
			    public long Codigo_INE;

				public long getCodigo_INE () {
					return this.Codigo_INE;
				}
				
			    public String Localidad;

				public String getLocalidad () {
					return this.Localidad;
				}
				
			    public java.util.Date Fecha;

				public java.util.Date getFecha () {
					return this.Fecha;
				}
				
			    public String Festividad;

				public String getFestividad () {
					return this.Festividad;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length) {
				if(length < 1024 && commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length == 0) {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[1024];
				} else {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length);
			strReturn = new String(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos) {

        	try {

        		int length = 0;
		
			        this.Codigo_INE = dis.readLong();
					
					this.Localidad = readString(dis);
					
					this.Fecha = readDate(dis);
					
					this.Festividad = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.Codigo_INE);
					
					// String
				
						writeString(this.Localidad,dos);
					
					// java.util.Date
				
						writeDate(this.Fecha,dos);
					
					// String
				
						writeString(this.Festividad,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Codigo_INE="+String.valueOf(Codigo_INE));
		sb.append(",Localidad="+Localidad);
		sb.append(",Fecha="+String.valueOf(Fecha));
		sb.append(",Festividad="+Festividad);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tHSQLDbOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHSQLDbOutput_2", false);
		start_Hash.put("tHSQLDbOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHSQLDbOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tHSQLDbOutput_2 = 0;
		
    	class BytesLimit65535_tHSQLDbOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHSQLDbOutput_2().limitLog4jByte();



	String url_tHSQLDbOutput_2 = null;
		url_tHSQLDbOutput_2 = "jdbc:hsqldb:file:" + context.databasePath + "/" + context.databaseName ;
		
		url_tHSQLDbOutput_2 += ";" + context.databaseAdditionalParams;

int nb_line_tHSQLDbOutput_2 = 0;
int nb_line_update_tHSQLDbOutput_2 = 0;
int nb_line_inserted_tHSQLDbOutput_2 = 0;
int nb_line_deleted_tHSQLDbOutput_2 = 0;
int nb_line_rejected_tHSQLDbOutput_2 = 0;

int deletedCount_tHSQLDbOutput_2=0;
int updatedCount_tHSQLDbOutput_2=0;
int insertedCount_tHSQLDbOutput_2=0;
int rejectedCount_tHSQLDbOutput_2=0;

String tableName_tHSQLDbOutput_2 = context.databaseTableName;
boolean whetherReject_tHSQLDbOutput_2 = false;

        int updateKeyCount_tHSQLDbOutput_2 = 2;
        if(updateKeyCount_tHSQLDbOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } 
java.lang.Class.forName("org.hsqldb.jdbcDriver");
String dbUser_tHSQLDbOutput_2 = context.databaseConnectionUser;

	final String decryptedPassword_tHSQLDbOutput_2 = context.databaseConnectionPass; 

String dbPwd_tHSQLDbOutput_2 = decryptedPassword_tHSQLDbOutput_2;	
java.sql.Connection conn_tHSQLDbOutput_2 = java.sql.DriverManager.getConnection(url_tHSQLDbOutput_2, dbUser_tHSQLDbOutput_2, dbPwd_tHSQLDbOutput_2);
resourceMap.put("conn_tHSQLDbOutput_2", conn_tHSQLDbOutput_2);
conn_tHSQLDbOutput_2.setAutoCommit(false);
	    String update_tHSQLDbOutput_2 = "UPDATE " + context.databaseTableName + " SET Codigo_INE = ?,Localidad = ?,Fecha = ?,Festividad = ? WHERE Codigo_INE = ? AND Fecha = ?";
	    java.sql.PreparedStatement pstmtUpdate_tHSQLDbOutput_2 = conn_tHSQLDbOutput_2.prepareStatement(update_tHSQLDbOutput_2);
	    String insert_tHSQLDbOutput_2 = "INSERT INTO " + context.databaseTableName + " (Codigo_INE,Localidad,Fecha,Festividad) VALUES (?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tHSQLDbOutput_2 = conn_tHSQLDbOutput_2.prepareStatement(insert_tHSQLDbOutput_2);		
	    
        
        int commitEvery_tHSQLDbOutput_2 = 10000;
        
        int commitCounter_tHSQLDbOutput_2 = 0;
        




 



/**
 * [tHSQLDbOutput_2 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_2", false);
		start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_2";

	
		int tos_count_tFileInputExcel_2 = 0;
		
    	class BytesLimit65535_tFileInputExcel_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_2().limitLog4jByte();



			class RegexUtil_tFileInputExcel_2 {

		    	public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

			        if(useRegex){//this part process the regex issue

				        jxl.Sheet[] sheets = workbook.getSheets();
				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (int i = 0; i < sheets.length; i++) {
				            String sheetName = sheets[i].getName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	jxl.Sheet sheet = workbook.getSheet(sheetName);
				            	if(sheet != null){
				                	list.add(sheet);
				                }
				            }
				        }

			        }else{
			        	jxl.Sheet sheet = workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, int index, boolean useRegex) {
			    	java.util.List<jxl.Sheet> list =  new java.util.ArrayList<jxl.Sheet>();
			    	jxl.Sheet sheet = workbook.getSheet(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}


		RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();
		final jxl.WorkbookSettings workbookSettings_tFileInputExcel_2 = new jxl.WorkbookSettings();
		workbookSettings_tFileInputExcel_2.setDrawingsDisabled(true);
        workbookSettings_tFileInputExcel_2.setEncoding(context.docsEncoding);

        Object source_tFileInputExcel_2 =context.inXlsUpdateDocPath + context.inXlsUpdateDocName;
        final jxl.Workbook workbook_tFileInputExcel_2;

        java.io.InputStream toClose_tFileInputExcel_2 = null;
        java.io.BufferedInputStream buffIStreamtFileInputExcel_2 = null;
        try {
            if(source_tFileInputExcel_2 instanceof java.io.InputStream){
        		toClose_tFileInputExcel_2 = (java.io.InputStream)source_tFileInputExcel_2;
        		buffIStreamtFileInputExcel_2 = new java.io.BufferedInputStream(toClose_tFileInputExcel_2);
        		workbook_tFileInputExcel_2 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_2, workbookSettings_tFileInputExcel_2);
            }else if(source_tFileInputExcel_2 instanceof String){
        		toClose_tFileInputExcel_2 = new java.io.FileInputStream(source_tFileInputExcel_2.toString());
        		buffIStreamtFileInputExcel_2 = new java.io.BufferedInputStream(toClose_tFileInputExcel_2);
        		workbook_tFileInputExcel_2 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_2, workbookSettings_tFileInputExcel_2);
            }else{
            	workbook_tFileInputExcel_2 = null;
            	throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
            }
        } finally {
			try{
			   if(buffIStreamtFileInputExcel_2 != null){
			   	  buffIStreamtFileInputExcel_2.close();
			   }
			}catch(Exception e){
			}
        }
        try {
		java.util.List<jxl.Sheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<jxl.Sheet>();
        sheetList_tFileInputExcel_2.addAll(regexUtil_tFileInputExcel_2.getSheets(workbook_tFileInputExcel_2, context.inOutXlsSheetName, false));
        if(sheetList_tFileInputExcel_2.size() <= 0){
        	throw new RuntimeException("Special sheets not exist!");
        }

        java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_2 = new java.util.ArrayList<jxl.Sheet>();
        for(jxl.Sheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2){
        	if(sheet_FilterNull_tFileInputExcel_2.getRows()>0){
        		sheet_FilterNullList_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
        	}
        }
		sheetList_tFileInputExcel_2 = sheet_FilterNullList_tFileInputExcel_2;
	if(sheetList_tFileInputExcel_2.size()>0){
        int nb_line_tFileInputExcel_2 = 0;

        int begin_line_tFileInputExcel_2 = 4;

        int footer_input_tFileInputExcel_2 = 0;

        int end_line_tFileInputExcel_2=0;
        for(jxl.Sheet sheet_tFileInputExcel_2:sheetList_tFileInputExcel_2){
        	end_line_tFileInputExcel_2+=sheet_tFileInputExcel_2.getRows();
        }
        end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
        int limit_tFileInputExcel_2 = -1;
        int start_column_tFileInputExcel_2 = 1-1;
        int end_column_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(0).getColumns();
        Integer lastColumn_tFileInputExcel_2 = 4;
        if(lastColumn_tFileInputExcel_2!=null){
        	end_column_tFileInputExcel_2 = lastColumn_tFileInputExcel_2.intValue();
        }
        jxl.Cell[] row_tFileInputExcel_2 = null;
        jxl.Sheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(0);
        int rowCount_tFileInputExcel_2 = 0;
        int sheetIndex_tFileInputExcel_2 = 0;
        int currentRows_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(0).getRows();

        //for the number format
        java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat("#.####################################");
		char separatorChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols().getDecimalSeparator();
		
		
		
        for(int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++){

        	int emptyColumnCount_tFileInputExcel_2 = 0;

        	if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
        		break;
        	}

            while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
                rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
                sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(++sheetIndex_tFileInputExcel_2);
                currentRows_tFileInputExcel_2 = sheet_tFileInputExcel_2.getRows();
            }
            if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
                row_tFileInputExcel_2 = sheet_tFileInputExcel_2.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
            }
        	globalMap.put("tFileInputExcel_2_CURRENT_SHEET",sheet_tFileInputExcel_2.getName());
    		row2 = null;
					int tempRowLength_tFileInputExcel_2 = 4;
				
				int columnIndex_tFileInputExcel_2 = 0;
			
//
//end%>
			
			String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
			int actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 >	row_tFileInputExcel_2.length ? row_tFileInputExcel_2.length : end_column_tFileInputExcel_2;

				java.util.TimeZone zone_tFileInputExcel_2 = java.util.TimeZone.getTimeZone("GMT");
                java.text.SimpleDateFormat sdf_tFileInputExcel_2 = new java.text.SimpleDateFormat("dd-MM-yyyy");
                sdf_tFileInputExcel_2.setTimeZone(zone_tFileInputExcel_2);
                

			for(int i=0;i<tempRowLength_tFileInputExcel_2;i++){

				if(i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2){

				  jxl.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2[i + start_column_tFileInputExcel_2];
                        temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getContents();

				}else{
					temp_row_tFileInputExcel_2[i]="";
				}
			}

			boolean whetherReject_tFileInputExcel_2 = false;
			row2 = new row2Struct();
			int curColNum_tFileInputExcel_2 = -1;
			String curColName_tFileInputExcel_2 = "";
			try {
							columnIndex_tFileInputExcel_2 = 0;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "Codigo_INE";
			row2.Codigo_INE = ParserUtils.parseTo_long(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim());
			}else {
				row2.Codigo_INE = 0;
				emptyColumnCount_tFileInputExcel_2++;
		}
							columnIndex_tFileInputExcel_2 = 1;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "Localidad";
			row2.Localidad = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else {
				row2.Localidad = null;
				emptyColumnCount_tFileInputExcel_2++;
		}
							columnIndex_tFileInputExcel_2 = 2;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "Fecha";
			if(2<actual_end_column_tFileInputExcel_2){
				try{
					java.util.Date dateGMT_tFileInputExcel_2 = ((jxl.DateCell)row_tFileInputExcel_2[columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2]).getDate();
					row2.Fecha = new java.util.Date(dateGMT_tFileInputExcel_2.getTime() - java.util.TimeZone.getDefault().getOffset(dateGMT_tFileInputExcel_2.getTime()));
				}catch(java.lang.Exception e){
					
					throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_2+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_2 + " )");
				}
			}
			}else {
				row2.Fecha = null;
				emptyColumnCount_tFileInputExcel_2++;
		}
							columnIndex_tFileInputExcel_2 = 3;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "Festividad";
			row2.Festividad = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else {
				row2.Festividad = null;
				emptyColumnCount_tFileInputExcel_2++;
		}

        if(emptyColumnCount_tFileInputExcel_2 >= 4){
        	break; //if meet the empty row, there will break the iterate.
        }
			nb_line_tFileInputExcel_2++;
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputExcel_2 = true;
                System.err.println(e.getMessage());
                row2 = null;
    }

					
		



 



/**
 * [tFileInputExcel_2 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 


	tos_count_tFileInputExcel_2++;

/**
 * [tFileInputExcel_2 main ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tHSQLDbOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHSQLDbOutput_2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		
	



        whetherReject_tHSQLDbOutput_2 = false;
            int updateFlag_tHSQLDbOutput_2=0;
                    pstmtUpdate_tHSQLDbOutput_2.setLong(1, row2.Codigo_INE);

                    if(row2.Localidad == null) {
pstmtUpdate_tHSQLDbOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tHSQLDbOutput_2.setString(2, row2.Localidad);
}

                    if(row2.Fecha != null) {
pstmtUpdate_tHSQLDbOutput_2.setTimestamp(3, new java.sql.Timestamp(row2.Fecha.getTime()));
} else {
pstmtUpdate_tHSQLDbOutput_2.setNull(3, java.sql.Types.DATE);
}

                    if(row2.Festividad == null) {
pstmtUpdate_tHSQLDbOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tHSQLDbOutput_2.setString(4, row2.Festividad);
}

                    pstmtUpdate_tHSQLDbOutput_2.setLong(5, row2.Codigo_INE);

                    if(row2.Fecha != null) {
pstmtUpdate_tHSQLDbOutput_2.setTimestamp(6, new java.sql.Timestamp(row2.Fecha.getTime()));
} else {
pstmtUpdate_tHSQLDbOutput_2.setNull(6, java.sql.Types.DATE);
}
  
            try {
                updateFlag_tHSQLDbOutput_2=pstmtUpdate_tHSQLDbOutput_2.executeUpdate();
                updatedCount_tHSQLDbOutput_2 = updatedCount_tHSQLDbOutput_2 + updateFlag_tHSQLDbOutput_2;
            if(updateFlag_tHSQLDbOutput_2 == 0) {
            	
                        pstmtInsert_tHSQLDbOutput_2.setLong(1, row2.Codigo_INE);

                        if(row2.Localidad == null) {
pstmtInsert_tHSQLDbOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tHSQLDbOutput_2.setString(2, row2.Localidad);
}

                        if(row2.Fecha != null) {
pstmtInsert_tHSQLDbOutput_2.setTimestamp(3, new java.sql.Timestamp(row2.Fecha.getTime()));
} else {
pstmtInsert_tHSQLDbOutput_2.setNull(3, java.sql.Types.DATE);
}

                        if(row2.Festividad == null) {
pstmtInsert_tHSQLDbOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tHSQLDbOutput_2.setString(4, row2.Festividad);
}

                    insertedCount_tHSQLDbOutput_2 = insertedCount_tHSQLDbOutput_2 + pstmtInsert_tHSQLDbOutput_2.executeUpdate();  
         			nb_line_tHSQLDbOutput_2++;
    			}else{
    				nb_line_tHSQLDbOutput_2++;
    				
    			}
                } catch(java.lang.Exception e) {
                    whetherReject_tHSQLDbOutput_2 = true;
                    	nb_line_tHSQLDbOutput_2++;
                    	
                            System.err.print(e.getMessage());
                }
            if(!whetherReject_tHSQLDbOutput_2) {
            }
            commitCounter_tHSQLDbOutput_2++;
            
            if(commitEvery_tHSQLDbOutput_2 <= commitCounter_tHSQLDbOutput_2) {
            	
                conn_tHSQLDbOutput_2.commit();
				                
                commitCounter_tHSQLDbOutput_2=0;
            
            }
        

 


	tos_count_tHSQLDbOutput_2++;

/**
 * [tHSQLDbOutput_2 main ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_2_NB_LINE",nb_line_tFileInputExcel_2);
			
				}
			
		} finally { 
				
					if(!(source_tFileInputExcel_2 instanceof java.io.InputStream)){
						workbook_tFileInputExcel_2.close();
					}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_2", true);
end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());




/**
 * [tFileInputExcel_2 end ] stop
 */

	
	/**
	 * [tHSQLDbOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHSQLDbOutput_2";

	



    if (commitCounter_tHSQLDbOutput_2 > 0) {
        conn_tHSQLDbOutput_2.commit();
    }
        if(pstmtUpdate_tHSQLDbOutput_2 != null){

            pstmtUpdate_tHSQLDbOutput_2.close();
            
        } 
        if(pstmtInsert_tHSQLDbOutput_2 != null){

            pstmtInsert_tHSQLDbOutput_2.close();
            
        }        
	conn_tHSQLDbOutput_2 .close();
	
	resourceMap.put("finish_tHSQLDbOutput_2", true);
	
	nb_line_deleted_tHSQLDbOutput_2=nb_line_deleted_tHSQLDbOutput_2+ deletedCount_tHSQLDbOutput_2;
	nb_line_update_tHSQLDbOutput_2=nb_line_update_tHSQLDbOutput_2 + updatedCount_tHSQLDbOutput_2;
	nb_line_inserted_tHSQLDbOutput_2=nb_line_inserted_tHSQLDbOutput_2 + insertedCount_tHSQLDbOutput_2;
	nb_line_rejected_tHSQLDbOutput_2=nb_line_rejected_tHSQLDbOutput_2 + rejectedCount_tHSQLDbOutput_2;
	
        globalMap.put("tHSQLDbOutput_2_NB_LINE",nb_line_tHSQLDbOutput_2);
        globalMap.put("tHSQLDbOutput_2_NB_LINE_UPDATED",nb_line_update_tHSQLDbOutput_2);
        globalMap.put("tHSQLDbOutput_2_NB_LINE_INSERTED",nb_line_inserted_tHSQLDbOutput_2);
        globalMap.put("tHSQLDbOutput_2_NB_LINE_DELETED",nb_line_deleted_tHSQLDbOutput_2);
        globalMap.put("tHSQLDbOutput_2_NB_LINE_REJECTED", nb_line_rejected_tHSQLDbOutput_2);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tHSQLDbOutput_2", true);
end_Hash.put("tHSQLDbOutput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tLibraryLoad_1Process(globalMap);



/**
 * [tHSQLDbOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 finally ] stop
 */

	
	/**
	 * [tHSQLDbOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHSQLDbOutput_2";

	



	
		if(resourceMap.get("finish_tHSQLDbOutput_2")==null){
			if(resourceMap.get("conn_tHSQLDbOutput_2")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tHSQLDbOutput_2")).close();
					
				} catch (java.sql.SQLException sqlEx_tHSQLDbOutput_2) {
					String errorMessage_tHSQLDbOutput_2 = "failed to close the connection in tHSQLDbOutput_2 :" + sqlEx_tHSQLDbOutput_2.getMessage();
					
					System.err.println(errorMessage_tHSQLDbOutput_2);
				}
			}
		}
	

 



/**
 * [tHSQLDbOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}
	

public void tLibraryLoad_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tLibraryLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLibraryLoad_1", false);
		start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tLibraryLoad_1";

	
		int tos_count_tLibraryLoad_1 = 0;
		
    	class BytesLimit65535_tLibraryLoad_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLibraryLoad_1().limitLog4jByte();



java.net.URLClassLoader sysloader_tLibraryLoad_1 = (java.net.URLClassLoader) ClassLoader.getSystemClassLoader();
java.lang.reflect.Method method_tLibraryLoad_1 = java.net.URLClassLoader.class.getDeclaredMethod("addURL", new Class[] { java.net.URL.class });
method_tLibraryLoad_1.setAccessible(true);

String[] libPaths_tLibraryLoad_1 = new String[] {  "commons-lang3-3.4.jar",  "commons-collections4-4.0.jar",  "slf4j-api-1.7.5.jar",  "slf4j-simple-1.7.5.jar",  };
for(String lib_tLibraryLoad_1:libPaths_tLibraryLoad_1 ){
	String separator_tLibraryLoad_1 = System.getProperty("path.separator");
	String[] jarFiles_tLibraryLoad_1 = lib_tLibraryLoad_1.split(separator_tLibraryLoad_1);	
	for(String jarFile_tLibraryLoad_1:jarFiles_tLibraryLoad_1){		
		method_tLibraryLoad_1.invoke(sysloader_tLibraryLoad_1, new Object[] { new java.io.File(jarFile_tLibraryLoad_1).toURL() });
	}
}


 



/**
 * [tLibraryLoad_1 begin ] stop
 */
	
	/**
	 * [tLibraryLoad_1 main ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_1";

	

 


	tos_count_tLibraryLoad_1++;

/**
 * [tLibraryLoad_1 main ] stop
 */
	
	/**
	 * [tLibraryLoad_1 end ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_1";

	

 

ok_Hash.put("tLibraryLoad_1", true);
end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tLibraryLoad_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLibraryLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_1";

	

 



/**
 * [tLibraryLoad_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		
    	class BytesLimit65535_tJava_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_1().limitLog4jByte();


//Creating a new calendar
net.fortuna.ical4j.model.Calendar calendar = new net.fortuna.ical4j.model.Calendar();
calendar.getProperties().add(new ProdId(context.outIcsDocHeaderPropertyProdId));
calendar.getProperties().add(Version.VERSION_2_0);
calendar.getProperties().add(CalScale.GREGORIAN);

globalMap.put("calendarioFestivosAragon", calendar);

 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tHSQLDbInput_2Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class CalendarMapperStruct implements routines.system.IPersistableRow<CalendarMapperStruct> {
    final static byte[] commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];
    static byte[] commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];

	
			    public String Codigo_INE;

				public String getCodigo_INE () {
					return this.Codigo_INE;
				}
				
			    public String Localidad;

				public String getLocalidad () {
					return this.Localidad;
				}
				
			    public java.util.Date Fecha;

				public java.util.Date getFecha () {
					return this.Fecha;
				}
				
			    public String Festividad;

				public String getFestividad () {
					return this.Festividad;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length) {
				if(length < 1024 && commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length == 0) {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[1024];
				} else {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length);
			strReturn = new String(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos) {

        	try {

        		int length = 0;
		
					this.Codigo_INE = readString(dis);
					
					this.Localidad = readString(dis);
					
					this.Fecha = readDate(dis);
					
					this.Festividad = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Codigo_INE,dos);
					
					// String
				
						writeString(this.Localidad,dos);
					
					// java.util.Date
				
						writeDate(this.Fecha,dos);
					
					// String
				
						writeString(this.Festividad,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Codigo_INE="+Codigo_INE);
		sb.append(",Localidad="+Localidad);
		sb.append(",Fecha="+String.valueOf(Fecha));
		sb.append(",Festividad="+Festividad);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CalendarMapperStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class MergedStruct implements routines.system.IPersistableRow<MergedStruct> {
    final static byte[] commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];
    static byte[] commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];

	
			    public String codigo_INE;

				public String getCodigo_INE () {
					return this.codigo_INE;
				}
				
			    public String localidad;

				public String getLocalidad () {
					return this.localidad;
				}
				
			    public java.util.Date fecha;

				public java.util.Date getFecha () {
					return this.fecha;
				}
				
			    public String festividad;

				public String getFestividad () {
					return this.festividad;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length) {
				if(length < 1024 && commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length == 0) {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[1024];
				} else {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length);
			strReturn = new String(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos) {

        	try {

        		int length = 0;
		
					this.codigo_INE = readString(dis);
					
					this.localidad = readString(dis);
					
					this.fecha = readDate(dis);
					
					this.festividad = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.codigo_INE,dos);
					
					// String
				
						writeString(this.localidad,dos);
					
					// java.util.Date
				
						writeDate(this.fecha,dos);
					
					// String
				
						writeString(this.festividad,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("codigo_INE="+codigo_INE);
		sb.append(",localidad="+localidad);
		sb.append(",fecha="+String.valueOf(fecha));
		sb.append(",festividad="+festividad);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(MergedStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];
    static byte[] commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];

	
			    public String Codigo_INE;

				public String getCodigo_INE () {
					return this.Codigo_INE;
				}
				
			    public String Localidad;

				public String getLocalidad () {
					return this.Localidad;
				}
				
			    public java.util.Date Fecha;

				public java.util.Date getFecha () {
					return this.Fecha;
				}
				
			    public String Festividad;

				public String getFestividad () {
					return this.Festividad;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length) {
				if(length < 1024 && commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length == 0) {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[1024];
				} else {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length);
			strReturn = new String(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos) {

        	try {

        		int length = 0;
		
					this.Codigo_INE = readString(dis);
					
					this.Localidad = readString(dis);
					
					this.Fecha = readDate(dis);
					
					this.Festividad = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Codigo_INE,dos);
					
					// String
				
						writeString(this.Localidad,dos);
					
					// java.util.Date
				
						writeDate(this.Fecha,dos);
					
					// String
				
						writeString(this.Festividad,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Codigo_INE="+Codigo_INE);
		sb.append(",Localidad="+Localidad);
		sb.append(",Fecha="+String.valueOf(Fecha));
		sb.append(",Festividad="+Festividad);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];
    static byte[] commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];

	
			    public String Codigo_INE;

				public String getCodigo_INE () {
					return this.Codigo_INE;
				}
				
			    public String Localidad;

				public String getLocalidad () {
					return this.Localidad;
				}
				
			    public java.util.Date Fecha;

				public java.util.Date getFecha () {
					return this.Fecha;
				}
				
			    public String Festividad;

				public String getFestividad () {
					return this.Festividad;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length) {
				if(length < 1024 && commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length == 0) {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[1024];
				} else {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length);
			strReturn = new String(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos) {

        	try {

        		int length = 0;
		
					this.Codigo_INE = readString(dis);
					
					this.Localidad = readString(dis);
					
					this.Fecha = readDate(dis);
					
					this.Festividad = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Codigo_INE,dos);
					
					// String
				
						writeString(this.Localidad,dos);
					
					// java.util.Date
				
						writeDate(this.Fecha,dos);
					
					// String
				
						writeString(this.Festividad,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Codigo_INE="+Codigo_INE);
		sb.append(",Localidad="+Localidad);
		sb.append(",Fecha="+String.valueOf(Fecha));
		sb.append(",Festividad="+Festividad);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];
    static byte[] commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];

	
			    public String Codigo_INE;

				public String getCodigo_INE () {
					return this.Codigo_INE;
				}
				
			    public String Localidad;

				public String getLocalidad () {
					return this.Localidad;
				}
				
			    public java.util.Date Fecha;

				public java.util.Date getFecha () {
					return this.Fecha;
				}
				
			    public String Festividad;

				public String getFestividad () {
					return this.Festividad;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length) {
				if(length < 1024 && commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length == 0) {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[1024];
				} else {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length);
			strReturn = new String(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos) {

        	try {

        		int length = 0;
		
					this.Codigo_INE = readString(dis);
					
					this.Localidad = readString(dis);
					
					this.Fecha = readDate(dis);
					
					this.Festividad = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Codigo_INE,dos);
					
					// String
				
						writeString(this.Localidad,dos);
					
					// java.util.Date
				
						writeDate(this.Fecha,dos);
					
					// String
				
						writeString(this.Festividad,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Codigo_INE="+Codigo_INE);
		sb.append(",Localidad="+Localidad);
		sb.append(",Fecha="+String.valueOf(Fecha));
		sb.append(",Festividad="+Festividad);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];
    static byte[] commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];

	
			    public String Codigo_INE;

				public String getCodigo_INE () {
					return this.Codigo_INE;
				}
				
			    public String Localidad;

				public String getLocalidad () {
					return this.Localidad;
				}
				
			    public java.util.Date Fecha;

				public java.util.Date getFecha () {
					return this.Fecha;
				}
				
			    public String Festividad;

				public String getFestividad () {
					return this.Festividad;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length) {
				if(length < 1024 && commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length == 0) {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[1024];
				} else {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length);
			strReturn = new String(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos) {

        	try {

        		int length = 0;
		
					this.Codigo_INE = readString(dis);
					
					this.Localidad = readString(dis);
					
					this.Fecha = readDate(dis);
					
					this.Festividad = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Codigo_INE,dos);
					
					// String
				
						writeString(this.Localidad,dos);
					
					// java.util.Date
				
						writeDate(this.Fecha,dos);
					
					// String
				
						writeString(this.Festividad,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Codigo_INE="+Codigo_INE);
		sb.append(",Localidad="+Localidad);
		sb.append(",Fecha="+String.valueOf(Fecha));
		sb.append(",Festividad="+Festividad);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];
    static byte[] commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];

	
			    public String Codigo_INE;

				public String getCodigo_INE () {
					return this.Codigo_INE;
				}
				
			    public String Localidad;

				public String getLocalidad () {
					return this.Localidad;
				}
				
			    public java.util.Date Fecha;

				public java.util.Date getFecha () {
					return this.Fecha;
				}
				
			    public String Festividad;

				public String getFestividad () {
					return this.Festividad;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length) {
				if(length < 1024 && commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length == 0) {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[1024];
				} else {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length);
			strReturn = new String(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos) {

        	try {

        		int length = 0;
		
					this.Codigo_INE = readString(dis);
					
					this.Localidad = readString(dis);
					
					this.Fecha = readDate(dis);
					
					this.Festividad = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Codigo_INE,dos);
					
					// String
				
						writeString(this.Localidad,dos);
					
					// java.util.Date
				
						writeDate(this.Fecha,dos);
					
					// String
				
						writeString(this.Festividad,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Codigo_INE="+Codigo_INE);
		sb.append(",Localidad="+Localidad);
		sb.append(",Fecha="+String.valueOf(Fecha));
		sb.append(",Festividad="+Festividad);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];
    static byte[] commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[0];

	
			    public String Codigo_INE;

				public String getCodigo_INE () {
					return this.Codigo_INE;
				}
				
			    public String Localidad;

				public String getLocalidad () {
					return this.Localidad;
				}
				
			    public java.util.Date Fecha;

				public java.util.Date getFecha () {
					return this.Fecha;
				}
				
			    public String Festividad;

				public String getFestividad () {
					return this.Festividad;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length) {
				if(length < 1024 && commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos.length == 0) {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[1024];
				} else {
   					commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length);
			strReturn = new String(commonByteArray_FESTIVOSDGA_AOD_GeneraFicherosFestivos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FESTIVOSDGA_AOD_GeneraFicherosFestivos) {

        	try {

        		int length = 0;
		
					this.Codigo_INE = readString(dis);
					
					this.Localidad = readString(dis);
					
					this.Fecha = readDate(dis);
					
					this.Festividad = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Codigo_INE,dos);
					
					// String
				
						writeString(this.Localidad,dos);
					
					// java.util.Date
				
						writeDate(this.Fecha,dos);
					
					// String
				
						writeString(this.Festividad,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Codigo_INE="+Codigo_INE);
		sb.append(",Localidad="+Localidad);
		sb.append(",Fecha="+String.valueOf(Fecha));
		sb.append(",Festividad="+Festividad);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHSQLDbInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHSQLDbInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
row3Struct row3 = new row3Struct();
row6Struct row6 = new row6Struct();
row8Struct row8 = new row8Struct();
row5Struct row5 = new row5Struct();
MergedStruct Merged = new MergedStruct();
row7Struct row7 = new row7Struct();
CalendarMapperStruct CalendarMapper = new CalendarMapperStruct();





	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputExcel_1 = 0;
		
    	class BytesLimit65535_tFileOutputExcel_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputExcel_1().limitLog4jByte();


		int columnIndex_tFileOutputExcel_1 = 0;
		
		int nb_line_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1=context.outDocsPath + context.outXlsDocName;
		java.io.File file_tFileOutputExcel_1 = new java.io.File(fileName_tFileOutputExcel_1);
		boolean isFileGenerated_tFileOutputExcel_1 = true;
		if(file_tFileOutputExcel_1.exists()){
			isFileGenerated_tFileOutputExcel_1 = false;
		}
//create directory only if not exists		  
          java.io.File parentFile_tFileOutputExcel_1 = file_tFileOutputExcel_1.getParentFile();
          if (parentFile_tFileOutputExcel_1 != null && !parentFile_tFileOutputExcel_1.exists()) {
        	
             parentFile_tFileOutputExcel_1.mkdirs();
        	
          }		
		
		jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_1 = null;
		jxl.write.WritableSheet writableSheet_tFileOutputExcel_1 = null;
		
		jxl.WorkbookSettings workbookSettings_tFileOutputExcel_1 = new jxl.WorkbookSettings();
        workbookSettings_tFileOutputExcel_1.setEncoding(context.docsEncoding);  
        if (file_tFileOutputExcel_1.exists()) {
        jxl.Workbook workbook_tFileOutputExcel_1 = jxl.Workbook.getWorkbook(file_tFileOutputExcel_1,workbookSettings_tFileOutputExcel_1);
        workbookSettings_tFileOutputExcel_1.setWriteAccess(null);
        writeableWorkbook_tFileOutputExcel_1 = new jxl.write.biff.WritableWorkbookImpl(
                	new java.io.BufferedOutputStream(new java.io.FileOutputStream(file_tFileOutputExcel_1, false)), 
                	workbook_tFileOutputExcel_1, 
                	true,
                    workbookSettings_tFileOutputExcel_1);
        }else{        
		writeableWorkbook_tFileOutputExcel_1 = new jxl.write.biff.WritableWorkbookImpl(
            		new java.io.BufferedOutputStream(new java.io.FileOutputStream(fileName_tFileOutputExcel_1)), 
            		true, 
            		workbookSettings_tFileOutputExcel_1);        
        }            

        writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1.getSheet(context.inOutXlsSheetName);
        if(writableSheet_tFileOutputExcel_1 == null){
        	writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1.createSheet(context.inOutXlsSheetName, writeableWorkbook_tFileOutputExcel_1.getNumberOfSheets());
		}
		

        //modif start
		int startRowNum_tFileOutputExcel_1 = 4;
		//modif end
		
		int[] fitWidth_tFileOutputExcel_1 = new int[4];
		for(int i_tFileOutputExcel_1=0;i_tFileOutputExcel_1<4;i_tFileOutputExcel_1++){
		    int fitCellViewSize_tFileOutputExcel_1=writableSheet_tFileOutputExcel_1.getColumnView(i_tFileOutputExcel_1+0).getSize();
			fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1]=fitCellViewSize_tFileOutputExcel_1/256;
			if(fitCellViewSize_tFileOutputExcel_1%256!=0){
				fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1]+=1;
			}
		}
					
						final jxl.write.WritableCellFormat cell_format_Fecha_tFileOutputExcel_1=new jxl.write.WritableCellFormat(new jxl.write.DateFormat("dd/MM/yyyy"));		


		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */




	
	/**
	 * [tFileOutputJSON_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputJSON_1", false);
		start_Hash.put("tFileOutputJSON_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputJSON_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputJSON_1 = 0;
		
    	class BytesLimit65535_tFileOutputJSON_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputJSON_1().limitLog4jByte();
int nb_line_tFileOutputJSON_1 = 0;
java.io.File file_tFileOutputJSON_1 = new java.io.File(context.outDocsPath + context.outJsonDocName);
java.io.File dir_tFileOutputJSON_1 = file_tFileOutputJSON_1.getParentFile();
	if(dir_tFileOutputJSON_1!=null && !dir_tFileOutputJSON_1.exists()){
		dir_tFileOutputJSON_1.mkdirs();
	}
java.io.PrintWriter outtFileOutputJSON_1 = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.FileWriter(context.outDocsPath + context.outJsonDocName)));
	outtFileOutputJSON_1.append("{\"" + context.outJsonDocDataBlock + "\":[");
boolean isFirst_tFileOutputJSON_1 = true;
 



/**
 * [tFileOutputJSON_1 begin ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.outDocsPath + context.outCsvDocName)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitEvery_tFileOutputDelimited_1 = 1000;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),context.docsEncoding));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("Codigo_INE");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Localidad");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Fecha");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Festividad");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */





	
	/**
	 * [tFileOutputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputXML_1", false);
		start_Hash.put("tFileOutputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputXML_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Merged" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputXML_1 = 0;
		
    	class BytesLimit65535_tFileOutputXML_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputXML_1().limitLog4jByte();


	String originalFileName_tFileOutputXML_1 = context.outDocsPath + context.outXmlDocName;
	java.io.File originalFile_tFileOutputXML_1 = new java.io.File(originalFileName_tFileOutputXML_1); 

	String fileName_tFileOutputXML_1 = originalFileName_tFileOutputXML_1;
	java.io.File file_tFileOutputXML_1 = new java.io.File(fileName_tFileOutputXML_1); 
	if(!file_tFileOutputXML_1.isAbsolute()) {
		file_tFileOutputXML_1 = file_tFileOutputXML_1.getCanonicalFile();
	}

	//create directory only if not exists
	
	file_tFileOutputXML_1.getParentFile().mkdirs();
	
	String[] headers_tFileOutputXML_1 = new String[2];
		
	headers_tFileOutputXML_1[0] = "<?xml version=\"1.0\" encoding=\""+context.docsEncoding+"\"?>";  

	String[] footers_tFileOutputXML_1 = new String[1];

	headers_tFileOutputXML_1[1] = "<"+context.outXmlDocRootTag+">";

	footers_tFileOutputXML_1[0] = "</"+context.outXmlDocRootTag+">";


	int nb_line_tFileOutputXML_1 = 0;


	java.io.BufferedWriter out_tFileOutputXML_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(file_tFileOutputXML_1), context.docsEncoding));

	out_tFileOutputXML_1.write(headers_tFileOutputXML_1[0]);
	out_tFileOutputXML_1.newLine();	
	out_tFileOutputXML_1.write(headers_tFileOutputXML_1[1]);
	out_tFileOutputXML_1.newLine();	

 



/**
 * [tFileOutputXML_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
MergedStruct Merged_tmp = new MergedStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */





	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("CalendarMapper" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
CalendarMapperStruct CalendarMapper_tmp = new CalendarMapperStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tReplicate_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_1", false);
		start_Hash.put("tReplicate_1", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tReplicate_1 = 0;
		
    	class BytesLimit65535_tReplicate_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tReplicate_1().limitLog4jByte();

 



/**
 * [tReplicate_1 begin ] stop
 */



	
	/**
	 * [tHSQLDbInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHSQLDbInput_2", false);
		start_Hash.put("tHSQLDbInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHSQLDbInput_2";

	
		int tos_count_tHSQLDbInput_2 = 0;
		
    	class BytesLimit65535_tHSQLDbInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tHSQLDbInput_2().limitLog4jByte();
	
    
	
		    int nb_line_tHSQLDbInput_2 = 0;
		    java.sql.Connection conn_tHSQLDbInput_2 = null;
				String driverClass_tHSQLDbInput_2 = "org.hsqldb.jdbcDriver";
			    java.lang.Class.forName(driverClass_tHSQLDbInput_2);
			   	String dbUser_tHSQLDbInput_2 = context.databaseConnectionUser;
			   	
        		
        		
        		
	final String decryptedPassword_tHSQLDbInput_2 = context.databaseConnectionPass; 
			   	
		        String dbPwd_tHSQLDbInput_2 = decryptedPassword_tHSQLDbInput_2;
		        
				
			String url_tHSQLDbInput_2 = null;
		        url_tHSQLDbInput_2 = "jdbc:hsqldb:file:" + context.databasePath + "/" + context.databaseName;
				url_tHSQLDbInput_2 += ";" + context.databaseAdditionalParams;
				
				conn_tHSQLDbInput_2 = java.sql.DriverManager.getConnection(url_tHSQLDbInput_2,dbUser_tHSQLDbInput_2,dbPwd_tHSQLDbInput_2);
		        
		    
			java.sql.Statement stmt_tHSQLDbInput_2 = conn_tHSQLDbInput_2.createStatement();

		    String dbquery_tHSQLDbInput_2 = context.databaseQuerySelect + " " + context.databaseTableName + " " + context.databaseQueryOrderBy;
			

                       globalMap.put("tHSQLDbInput_2_QUERY",dbquery_tHSQLDbInput_2);

		    java.sql.ResultSet rs_tHSQLDbInput_2 = null;
		try{
		    rs_tHSQLDbInput_2 = stmt_tHSQLDbInput_2.executeQuery(dbquery_tHSQLDbInput_2);
		    java.sql.ResultSetMetaData rsmd_tHSQLDbInput_2 = rs_tHSQLDbInput_2.getMetaData();
		    int colQtyInRs_tHSQLDbInput_2 = rsmd_tHSQLDbInput_2.getColumnCount();

		    String tmpContent_tHSQLDbInput_2 = null;
		    
		    
		    while (rs_tHSQLDbInput_2.next()) {
		        nb_line_tHSQLDbInput_2++;
		        
							if(colQtyInRs_tHSQLDbInput_2 < 1) {
								row4.Codigo_INE = null;
							} else {
	                         		
        	row4.Codigo_INE = routines.system.JDBCUtil.getString(rs_tHSQLDbInput_2, 1, true);
		                    }
							if(colQtyInRs_tHSQLDbInput_2 < 2) {
								row4.Localidad = null;
							} else {
	                         		
        	row4.Localidad = routines.system.JDBCUtil.getString(rs_tHSQLDbInput_2, 2, true);
		                    }
							if(colQtyInRs_tHSQLDbInput_2 < 3) {
								row4.Fecha = null;
							} else {
										
			row4.Fecha = routines.system.JDBCUtil.getDate(rs_tHSQLDbInput_2, 3);
		                    }
							if(colQtyInRs_tHSQLDbInput_2 < 4) {
								row4.Festividad = null;
							} else {
	                         		
        	row4.Festividad = routines.system.JDBCUtil.getString(rs_tHSQLDbInput_2, 4, true);
		                    }
					



 



/**
 * [tHSQLDbInput_2 begin ] stop
 */
	
	/**
	 * [tHSQLDbInput_2 main ] start
	 */

	

	
	
	currentComponent="tHSQLDbInput_2";

	

 


	tos_count_tHSQLDbInput_2++;

/**
 * [tHSQLDbInput_2 main ] stop
 */

	
	/**
	 * [tReplicate_1 main ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		


	row3 = new row3Struct();
						
	row3.Codigo_INE = row4.Codigo_INE;								
	row3.Localidad = row4.Localidad;								
	row3.Fecha = row4.Fecha;								
	row3.Festividad = row4.Festividad;			
	row6 = new row6Struct();
						
	row6.Codigo_INE = row4.Codigo_INE;								
	row6.Localidad = row4.Localidad;								
	row6.Fecha = row4.Fecha;								
	row6.Festividad = row4.Festividad;			
	row8 = new row8Struct();
						
	row8.Codigo_INE = row4.Codigo_INE;								
	row8.Localidad = row4.Localidad;								
	row8.Fecha = row4.Fecha;								
	row8.Festividad = row4.Festividad;			
	row5 = new row5Struct();
						
	row5.Codigo_INE = row4.Codigo_INE;								
	row5.Localidad = row4.Localidad;								
	row5.Fecha = row4.Fecha;								
	row5.Festividad = row4.Festividad;			
	row7 = new row7Struct();
						
	row7.Codigo_INE = row4.Codigo_INE;								
	row7.Localidad = row4.Localidad;								
	row7.Fecha = row4.Fecha;								
	row7.Festividad = row4.Festividad;			


 


	tos_count_tReplicate_1++;

/**
 * [tReplicate_1 main ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

								   				
	    				if(row3.Codigo_INE != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 0;
					

					
						
						jxl.write.WritableCell cell_0_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1 + 0, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1 ,
					
//modif end
								row3.Codigo_INE
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_0_tFileOutputExcel_1);
							int currentWith_0_tFileOutputExcel_1 = cell_0_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[0]=fitWidth_tFileOutputExcel_1[0]>currentWith_0_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[0]:currentWith_0_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row3.Localidad != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 1;
					

					
						
						jxl.write.WritableCell cell_1_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1 + 0, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1 ,
					
//modif end
								row3.Localidad
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_1_tFileOutputExcel_1);
							int currentWith_1_tFileOutputExcel_1 = cell_1_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[1]=fitWidth_tFileOutputExcel_1[1]>currentWith_1_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[1]:currentWith_1_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row3.Fecha != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 2;
					

					
						
						jxl.write.WritableCell cell_2_tFileOutputExcel_1 = new jxl.write.DateTime(columnIndex_tFileOutputExcel_1 + 0, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1 ,
					
//modif end
								row3.Fecha, cell_format_Fecha_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_2_tFileOutputExcel_1);
							int currentWith_2_tFileOutputExcel_1 = cell_2_tFileOutputExcel_1.getContents().trim().length();
							currentWith_2_tFileOutputExcel_1=12;
							fitWidth_tFileOutputExcel_1[2]=fitWidth_tFileOutputExcel_1[2]>currentWith_2_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[2]:currentWith_2_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row3.Festividad != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 3;
					

					
						
						jxl.write.WritableCell cell_3_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1 + 0, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1 ,
					
//modif end
								row3.Festividad
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_3_tFileOutputExcel_1);
							int currentWith_3_tFileOutputExcel_1 = cell_3_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[3]=fitWidth_tFileOutputExcel_1[3]>currentWith_3_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[3]:currentWith_3_tFileOutputExcel_1+2;
	    				} 
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */




	
	/**
	 * [tFileOutputJSON_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_1";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		


org.json.simple.JSONObject jsonRowtFileOutputJSON_1 = new org.json.simple.JSONObject();
			    	if(row6.Codigo_INE != null){
			    
					jsonRowtFileOutputJSON_1.put("Codigo_INE", row6.Codigo_INE);
				
					}else{
						jsonRowtFileOutputJSON_1.put("Codigo_INE", null);
					}
				
			    	if(row6.Localidad != null){
			    
					jsonRowtFileOutputJSON_1.put("Localidad", row6.Localidad);
				
					}else{
						jsonRowtFileOutputJSON_1.put("Localidad", null);
					}
				
			    	if(row6.Fecha != null){
			    
					jsonRowtFileOutputJSON_1.put("Fecha",FormatterUtils.format_Date(row6.Fecha, "dd/MM/yyyy"));
				
					}else{
						jsonRowtFileOutputJSON_1.put("Fecha", null);
					}
				
			    	if(row6.Festividad != null){
			    
					jsonRowtFileOutputJSON_1.put("Festividad", row6.Festividad);
				
					}else{
						jsonRowtFileOutputJSON_1.put("Festividad", null);
					}
				

if(!isFirst_tFileOutputJSON_1){
	outtFileOutputJSON_1.append(",");
}
isFirst_tFileOutputJSON_1 = false;
outtFileOutputJSON_1.append(jsonRowtFileOutputJSON_1.toJSONString());
nb_line_tFileOutputJSON_1++;

 


	tos_count_tFileOutputJSON_1++;

/**
 * [tFileOutputJSON_1 main ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row8.Codigo_INE != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.Codigo_INE
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.Localidad != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.Localidad
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.Fecha != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row8.Fecha, "dd/MM/yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row8.Festividad != null) {
                        sb_tFileOutputDelimited_1.append(
                            row8.Festividad
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */




	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

Merged = null;


// # Output table : 'Merged'
Merged_tmp.codigo_INE = row5.Codigo_INE ;
Merged_tmp.localidad = row5.Localidad ;
Merged_tmp.fecha = row5.Fecha ;
Merged_tmp.festividad = row5.Festividad ;
Merged = Merged_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "Merged"
if(Merged != null) { 



	
	/**
	 * [tFileOutputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputXML_1";

	

			//Merged
			//Merged


			
				if(execStat){
					runStat.updateStatOnConnection("Merged"+iterateId,1, 1);
				} 
			

		

StringBuilder tempRes_tFileOutputXML_1 = new StringBuilder("<"+context.outXmlDocRowTag);
tempRes_tFileOutputXML_1.append(">");
out_tFileOutputXML_1.write(tempRes_tFileOutputXML_1.toString());

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"codigo_INE"+">"+((Merged.codigo_INE == null)?"":(TalendString.checkCDATAForXML(Merged.codigo_INE)))+"</"+"codigo_INE"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"localidad"+">"+((Merged.localidad == null)?"":(TalendString.checkCDATAForXML(Merged.localidad)))+"</"+"localidad"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"fecha"+">"+((Merged.fecha == null)?"":(TalendString.checkCDATAForXML(FormatterUtils.format_Date(Merged.fecha, "dd/MM/yyyy"))))+"</"+"fecha"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"festividad"+">"+((Merged.festividad == null)?"":(TalendString.checkCDATAForXML(Merged.festividad)))+"</"+"festividad"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("</"+context.outXmlDocRowTag+">");

out_tFileOutputXML_1.newLine();


nb_line_tFileOutputXML_1++;

 


	tos_count_tFileOutputXML_1++;

/**
 * [tFileOutputXML_1 main ] stop
 */

} // End of branch "Merged"








	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

CalendarMapper = null;


// # Output table : 'CalendarMapper'
CalendarMapper_tmp.Codigo_INE = row7.Codigo_INE ;
CalendarMapper_tmp.Localidad = row7.Localidad ;
CalendarMapper_tmp.Fecha = row7.Fecha ;
CalendarMapper_tmp.Festividad = row7.Festividad ;
CalendarMapper = CalendarMapper_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
// Start of branch "CalendarMapper"
if(CalendarMapper != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//CalendarMapper
			//CalendarMapper


			
				if(execStat){
					runStat.updateStatOnConnection("CalendarMapper"+iterateId,1, 1);
				} 
			

		

    if (globalMap.containsKey("calendarioFestivosAragon")) {
	if (CalendarMapper.Fecha != null) {
		//Getting the calendar from the Global Map
		net.fortuna.ical4j.model.Calendar calendar = (net.fortuna.ical4j.model.Calendar) globalMap.get("calendarioFestivosAragon");
		
		//Generating event name
		StringBuilder eventName = new StringBuilder("");
		eventName.append("Festivo en ").append(CalendarMapper.Localidad);
		if (CalendarMapper.Festividad != null && !"".equals(CalendarMapper.Festividad)) {
			eventName.append(" (").append(CalendarMapper.Festividad).append(")");
		}
		
		//Creating an event
		VEvent bankHolidayEvent = new VEvent(new net.fortuna.ical4j.model.Date(CalendarMapper.Fecha.getTime()), eventName.toString());

		//bankHolidayEvent.getProperties().getProperty(Property.DTSTART).getParameters().add(Value.DATE);
  		
		UidGenerator uidGenerator = new UidGenerator("1");
		bankHolidayEvent.getProperties().add(uidGenerator.generateUid());
		calendar.getComponents().add(bankHolidayEvent);
	
		//Setting the calendar udpated into the Global Map
		globalMap.put("calendarioFestivosAragon", calendar);
	}
} else {
	System.out.println("No se ha creado el calendario y no se puede continuar");
	throw new IOException("Calendar not found in Map");
}
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */

} // End of branch "CalendarMapper"










	
	/**
	 * [tHSQLDbInput_2 end ] start
	 */

	

	
	
	currentComponent="tHSQLDbInput_2";

	

	}
}finally{
	stmt_tHSQLDbInput_2.close();

		if(conn_tHSQLDbInput_2 != null && !conn_tHSQLDbInput_2.isClosed()) {
			
			conn_tHSQLDbInput_2.close();
			
		}
}
globalMap.put("tHSQLDbInput_2_NB_LINE",nb_line_tHSQLDbInput_2);

 

ok_Hash.put("tHSQLDbInput_2", true);
end_Hash.put("tHSQLDbInput_2", System.currentTimeMillis());




/**
 * [tHSQLDbInput_2 end ] stop
 */

	
	/**
	 * [tReplicate_1 end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tReplicate_1", true);
end_Hash.put("tReplicate_1", System.currentTimeMillis());




/**
 * [tReplicate_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

		writeableWorkbook_tFileOutputExcel_1.write();
		writeableWorkbook_tFileOutputExcel_1.close();
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */




	
	/**
	 * [tFileOutputJSON_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_1";

	

	outtFileOutputJSON_1.print("]}");
outtFileOutputJSON_1.close();
globalMap.put("tFileOutputJSON_1_NB_LINE",nb_line_tFileOutputJSON_1);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputJSON_1", true);
end_Hash.put("tFileOutputJSON_1", System.currentTimeMillis());




/**
 * [tFileOutputJSON_1 end ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */




	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputXML_1";

	

	out_tFileOutputXML_1.write(footers_tFileOutputXML_1[0]);

	out_tFileOutputXML_1.newLine();
	out_tFileOutputXML_1.close();
globalMap.put("tFileOutputXML_1_NB_LINE",nb_line_tFileOutputXML_1);
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Merged"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputXML_1", true);
end_Hash.put("tFileOutputXML_1", System.currentTimeMillis());




/**
 * [tFileOutputXML_1 end ] stop
 */







	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("CalendarMapper"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHSQLDbInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHSQLDbInput_2";

	

 



/**
 * [tHSQLDbInput_2 finally ] stop
 */

	
	/**
	 * [tReplicate_1 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */




	
	/**
	 * [tFileOutputJSON_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_1";

	

 



/**
 * [tFileOutputJSON_1 finally ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */




	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputXML_1";

	

 



/**
 * [tFileOutputXML_1 finally ] stop
 */







	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHSQLDbInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		
    	class BytesLimit65535_tJava_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_2().limitLog4jByte();


if (globalMap.containsKey("calendarioFestivosAragon")) {
	net.fortuna.ical4j.model.Calendar calendar = (net.fortuna.ical4j.model.Calendar) globalMap.get("calendarioFestivosAragon");
	
	FileOutputStream fout = new FileOutputStream(context.outDocsPath + context.outIcsDocName);

	CalendarOutputter outputter = new CalendarOutputter();
	outputter.output(calendar, fout);
}
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Server";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final AOD_GeneraFicherosFestivos AOD_GeneraFicherosFestivosClass = new AOD_GeneraFicherosFestivos();

        int exitCode = AOD_GeneraFicherosFestivosClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = AOD_GeneraFicherosFestivos.class.getClassLoader().getResourceAsStream("festivosdga/aod_generaficherosfestivos_1_0/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
                context.databaseAdditionalParams=(String) context.getProperty("databaseAdditionalParams");
                context.databaseConnectionHost=(String) context.getProperty("databaseConnectionHost");
                context.databaseConnectionPass=(String) context.getProperty("databaseConnectionPass");
                context.databaseConnectionPort=(String) context.getProperty("databaseConnectionPort");
                context.databaseConnectionUser=(String) context.getProperty("databaseConnectionUser");
                context.databaseName=(String) context.getProperty("databaseName");
                context.databasePath=(String) context.getProperty("databasePath");
                context.databaseQueryOrderBy=(String) context.getProperty("databaseQueryOrderBy");
                context.databaseQuerySelect=(String) context.getProperty("databaseQuerySelect");
                context.databaseTableName_HUE=(String) context.getProperty("databaseTableName_HUE");
                context.databaseTableName_TER=(String) context.getProperty("databaseTableName_TER");
                context.databaseTableName_ZGZ=(String) context.getProperty("databaseTableName_ZGZ");
                context.docsEncoding=(String) context.getProperty("docsEncoding");
                context.inOutXlsSheetName_HUE=(String) context.getProperty("inOutXlsSheetName_HUE");
                context.inOutXlsSheetName_TER=(String) context.getProperty("inOutXlsSheetName_TER");
                context.inOutXlsSheetName_ZGZ=(String) context.getProperty("inOutXlsSheetName_ZGZ");
                context.inXlsOriginalDocName_HUE=(String) context.getProperty("inXlsOriginalDocName_HUE");
                context.inXlsOriginalDocName_TER=(String) context.getProperty("inXlsOriginalDocName_TER");
                context.inXlsOriginalDocName_ZGZ=(String) context.getProperty("inXlsOriginalDocName_ZGZ");
                context.inXlsOriginalDocPath_HUE=(String) context.getProperty("inXlsOriginalDocPath_HUE");
                context.inXlsOriginalDocPath_TER=(String) context.getProperty("inXlsOriginalDocPath_TER");
                context.inXlsOriginalDocPath_ZGZ=(String) context.getProperty("inXlsOriginalDocPath_ZGZ");
                context.inXlsUpdateDocName_HUE=(String) context.getProperty("inXlsUpdateDocName_HUE");
                context.inXlsUpdateDocName_TER=(String) context.getProperty("inXlsUpdateDocName_TER");
                context.inXlsUpdateDocName_ZGZ=(String) context.getProperty("inXlsUpdateDocName_ZGZ");
                context.inXlsUpdateDocPath_HUE=(String) context.getProperty("inXlsUpdateDocPath_HUE");
                context.inXlsUpdateDocPath_TER=(String) context.getProperty("inXlsUpdateDocPath_TER");
                context.inXlsUpdateDocPath_ZGZ=(String) context.getProperty("inXlsUpdateDocPath_ZGZ");
                context.logConfigFile=(String) context.getProperty("logConfigFile");
                context.logOutFile=(String) context.getProperty("logOutFile");
                context.logOutPath=(String) context.getProperty("logOutPath");
                context.outCsvDocName_HUE=(String) context.getProperty("outCsvDocName_HUE");
                context.outCsvDocName_TER=(String) context.getProperty("outCsvDocName_TER");
                context.outCsvDocName_ZGZ=(String) context.getProperty("outCsvDocName_ZGZ");
                context.outDocsPath_HUE=(String) context.getProperty("outDocsPath_HUE");
                context.outDocsPath_TER=(String) context.getProperty("outDocsPath_TER");
                context.outDocsPath_ZGZ=(String) context.getProperty("outDocsPath_ZGZ");
                context.outIcsDocHeaderPropertyProdId_HUE=(String) context.getProperty("outIcsDocHeaderPropertyProdId_HUE");
                context.outIcsDocHeaderPropertyProdId_TER=(String) context.getProperty("outIcsDocHeaderPropertyProdId_TER");
                context.outIcsDocHeaderPropertyProdId_ZGZ=(String) context.getProperty("outIcsDocHeaderPropertyProdId_ZGZ");
                context.outIcsDocName_HUE=(String) context.getProperty("outIcsDocName_HUE");
                context.outIcsDocName_TER=(String) context.getProperty("outIcsDocName_TER");
                context.outIcsDocName_ZGZ=(String) context.getProperty("outIcsDocName_ZGZ");
                context.outJsonDocDataBlock_HUE=(String) context.getProperty("outJsonDocDataBlock_HUE");
                context.outJsonDocDataBlock_TER=(String) context.getProperty("outJsonDocDataBlock_TER");
                context.outJsonDocDataBlock_ZGZ=(String) context.getProperty("outJsonDocDataBlock_ZGZ");
                context.outJsonDocName_HUE=(String) context.getProperty("outJsonDocName_HUE");
                context.outJsonDocName_TER=(String) context.getProperty("outJsonDocName_TER");
                context.outJsonDocName_ZGZ=(String) context.getProperty("outJsonDocName_ZGZ");
                context.outXlsDocName_HUE=(String) context.getProperty("outXlsDocName_HUE");
                context.outXlsDocName_TER=(String) context.getProperty("outXlsDocName_TER");
                context.outXlsDocName_ZGZ=(String) context.getProperty("outXlsDocName_ZGZ");
                context.outXmlDocName_HUE=(String) context.getProperty("outXmlDocName_HUE");
                context.outXmlDocName_TER=(String) context.getProperty("outXmlDocName_TER");
                context.outXmlDocName_ZGZ=(String) context.getProperty("outXmlDocName_ZGZ");
                context.outXmlDocRootTag_HUE=(String) context.getProperty("outXmlDocRootTag_HUE");
                context.outXmlDocRootTag_TER=(String) context.getProperty("outXmlDocRootTag_TER");
                context.outXmlDocRootTag_ZGZ=(String) context.getProperty("outXmlDocRootTag_ZGZ");
                context.outXmlDocRowTag=(String) context.getProperty("outXmlDocRowTag");
                context.databaseTableName=(String) context.getProperty("databaseTableName");
                context.etlConfName=(String) context.getProperty("etlConfName");
                context.etlConfPath=(String) context.getProperty("etlConfPath");
                context.inOutXlsSheetName=(String) context.getProperty("inOutXlsSheetName");
                context.inXlsOriginalDocName=(String) context.getProperty("inXlsOriginalDocName");
                context.inXlsOriginalDocPath=(String) context.getProperty("inXlsOriginalDocPath");
                context.inXlsUpdateDocName=(String) context.getProperty("inXlsUpdateDocName");
                context.inXlsUpdateDocPath=(String) context.getProperty("inXlsUpdateDocPath");
                context.outCsvDocName=(String) context.getProperty("outCsvDocName");
                context.outDocsPath=(String) context.getProperty("outDocsPath");
                context.outIcsDocHeaderPropertyProdId=(String) context.getProperty("outIcsDocHeaderPropertyProdId");
                context.outIcsDocName=(String) context.getProperty("outIcsDocName");
                context.outJsonDocDataBlock=(String) context.getProperty("outJsonDocDataBlock");
                context.outJsonDocName=(String) context.getProperty("outJsonDocName");
                context.outXlsDocName=(String) context.getProperty("outXlsDocName");
                context.outXmlDocName=(String) context.getProperty("outXmlDocName");
                context.outXmlDocRootTag=(String) context.getProperty("outXmlDocRootTag");
                context.provincesToLoad=(String) context.getProperty("provincesToLoad");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("databaseAdditionalParams")) {
                context.databaseAdditionalParams = (String) parentContextMap.get("databaseAdditionalParams");
            }if (parentContextMap.containsKey("databaseConnectionHost")) {
                context.databaseConnectionHost = (String) parentContextMap.get("databaseConnectionHost");
            }if (parentContextMap.containsKey("databaseConnectionPass")) {
                context.databaseConnectionPass = (String) parentContextMap.get("databaseConnectionPass");
            }if (parentContextMap.containsKey("databaseConnectionPort")) {
                context.databaseConnectionPort = (String) parentContextMap.get("databaseConnectionPort");
            }if (parentContextMap.containsKey("databaseConnectionUser")) {
                context.databaseConnectionUser = (String) parentContextMap.get("databaseConnectionUser");
            }if (parentContextMap.containsKey("databaseName")) {
                context.databaseName = (String) parentContextMap.get("databaseName");
            }if (parentContextMap.containsKey("databasePath")) {
                context.databasePath = (String) parentContextMap.get("databasePath");
            }if (parentContextMap.containsKey("databaseQueryOrderBy")) {
                context.databaseQueryOrderBy = (String) parentContextMap.get("databaseQueryOrderBy");
            }if (parentContextMap.containsKey("databaseQuerySelect")) {
                context.databaseQuerySelect = (String) parentContextMap.get("databaseQuerySelect");
            }if (parentContextMap.containsKey("databaseTableName_HUE")) {
                context.databaseTableName_HUE = (String) parentContextMap.get("databaseTableName_HUE");
            }if (parentContextMap.containsKey("databaseTableName_TER")) {
                context.databaseTableName_TER = (String) parentContextMap.get("databaseTableName_TER");
            }if (parentContextMap.containsKey("databaseTableName_ZGZ")) {
                context.databaseTableName_ZGZ = (String) parentContextMap.get("databaseTableName_ZGZ");
            }if (parentContextMap.containsKey("docsEncoding")) {
                context.docsEncoding = (String) parentContextMap.get("docsEncoding");
            }if (parentContextMap.containsKey("inOutXlsSheetName_HUE")) {
                context.inOutXlsSheetName_HUE = (String) parentContextMap.get("inOutXlsSheetName_HUE");
            }if (parentContextMap.containsKey("inOutXlsSheetName_TER")) {
                context.inOutXlsSheetName_TER = (String) parentContextMap.get("inOutXlsSheetName_TER");
            }if (parentContextMap.containsKey("inOutXlsSheetName_ZGZ")) {
                context.inOutXlsSheetName_ZGZ = (String) parentContextMap.get("inOutXlsSheetName_ZGZ");
            }if (parentContextMap.containsKey("inXlsOriginalDocName_HUE")) {
                context.inXlsOriginalDocName_HUE = (String) parentContextMap.get("inXlsOriginalDocName_HUE");
            }if (parentContextMap.containsKey("inXlsOriginalDocName_TER")) {
                context.inXlsOriginalDocName_TER = (String) parentContextMap.get("inXlsOriginalDocName_TER");
            }if (parentContextMap.containsKey("inXlsOriginalDocName_ZGZ")) {
                context.inXlsOriginalDocName_ZGZ = (String) parentContextMap.get("inXlsOriginalDocName_ZGZ");
            }if (parentContextMap.containsKey("inXlsOriginalDocPath_HUE")) {
                context.inXlsOriginalDocPath_HUE = (String) parentContextMap.get("inXlsOriginalDocPath_HUE");
            }if (parentContextMap.containsKey("inXlsOriginalDocPath_TER")) {
                context.inXlsOriginalDocPath_TER = (String) parentContextMap.get("inXlsOriginalDocPath_TER");
            }if (parentContextMap.containsKey("inXlsOriginalDocPath_ZGZ")) {
                context.inXlsOriginalDocPath_ZGZ = (String) parentContextMap.get("inXlsOriginalDocPath_ZGZ");
            }if (parentContextMap.containsKey("inXlsUpdateDocName_HUE")) {
                context.inXlsUpdateDocName_HUE = (String) parentContextMap.get("inXlsUpdateDocName_HUE");
            }if (parentContextMap.containsKey("inXlsUpdateDocName_TER")) {
                context.inXlsUpdateDocName_TER = (String) parentContextMap.get("inXlsUpdateDocName_TER");
            }if (parentContextMap.containsKey("inXlsUpdateDocName_ZGZ")) {
                context.inXlsUpdateDocName_ZGZ = (String) parentContextMap.get("inXlsUpdateDocName_ZGZ");
            }if (parentContextMap.containsKey("inXlsUpdateDocPath_HUE")) {
                context.inXlsUpdateDocPath_HUE = (String) parentContextMap.get("inXlsUpdateDocPath_HUE");
            }if (parentContextMap.containsKey("inXlsUpdateDocPath_TER")) {
                context.inXlsUpdateDocPath_TER = (String) parentContextMap.get("inXlsUpdateDocPath_TER");
            }if (parentContextMap.containsKey("inXlsUpdateDocPath_ZGZ")) {
                context.inXlsUpdateDocPath_ZGZ = (String) parentContextMap.get("inXlsUpdateDocPath_ZGZ");
            }if (parentContextMap.containsKey("logConfigFile")) {
                context.logConfigFile = (String) parentContextMap.get("logConfigFile");
            }if (parentContextMap.containsKey("logOutFile")) {
                context.logOutFile = (String) parentContextMap.get("logOutFile");
            }if (parentContextMap.containsKey("logOutPath")) {
                context.logOutPath = (String) parentContextMap.get("logOutPath");
            }if (parentContextMap.containsKey("outCsvDocName_HUE")) {
                context.outCsvDocName_HUE = (String) parentContextMap.get("outCsvDocName_HUE");
            }if (parentContextMap.containsKey("outCsvDocName_TER")) {
                context.outCsvDocName_TER = (String) parentContextMap.get("outCsvDocName_TER");
            }if (parentContextMap.containsKey("outCsvDocName_ZGZ")) {
                context.outCsvDocName_ZGZ = (String) parentContextMap.get("outCsvDocName_ZGZ");
            }if (parentContextMap.containsKey("outDocsPath_HUE")) {
                context.outDocsPath_HUE = (String) parentContextMap.get("outDocsPath_HUE");
            }if (parentContextMap.containsKey("outDocsPath_TER")) {
                context.outDocsPath_TER = (String) parentContextMap.get("outDocsPath_TER");
            }if (parentContextMap.containsKey("outDocsPath_ZGZ")) {
                context.outDocsPath_ZGZ = (String) parentContextMap.get("outDocsPath_ZGZ");
            }if (parentContextMap.containsKey("outIcsDocHeaderPropertyProdId_HUE")) {
                context.outIcsDocHeaderPropertyProdId_HUE = (String) parentContextMap.get("outIcsDocHeaderPropertyProdId_HUE");
            }if (parentContextMap.containsKey("outIcsDocHeaderPropertyProdId_TER")) {
                context.outIcsDocHeaderPropertyProdId_TER = (String) parentContextMap.get("outIcsDocHeaderPropertyProdId_TER");
            }if (parentContextMap.containsKey("outIcsDocHeaderPropertyProdId_ZGZ")) {
                context.outIcsDocHeaderPropertyProdId_ZGZ = (String) parentContextMap.get("outIcsDocHeaderPropertyProdId_ZGZ");
            }if (parentContextMap.containsKey("outIcsDocName_HUE")) {
                context.outIcsDocName_HUE = (String) parentContextMap.get("outIcsDocName_HUE");
            }if (parentContextMap.containsKey("outIcsDocName_TER")) {
                context.outIcsDocName_TER = (String) parentContextMap.get("outIcsDocName_TER");
            }if (parentContextMap.containsKey("outIcsDocName_ZGZ")) {
                context.outIcsDocName_ZGZ = (String) parentContextMap.get("outIcsDocName_ZGZ");
            }if (parentContextMap.containsKey("outJsonDocDataBlock_HUE")) {
                context.outJsonDocDataBlock_HUE = (String) parentContextMap.get("outJsonDocDataBlock_HUE");
            }if (parentContextMap.containsKey("outJsonDocDataBlock_TER")) {
                context.outJsonDocDataBlock_TER = (String) parentContextMap.get("outJsonDocDataBlock_TER");
            }if (parentContextMap.containsKey("outJsonDocDataBlock_ZGZ")) {
                context.outJsonDocDataBlock_ZGZ = (String) parentContextMap.get("outJsonDocDataBlock_ZGZ");
            }if (parentContextMap.containsKey("outJsonDocName_HUE")) {
                context.outJsonDocName_HUE = (String) parentContextMap.get("outJsonDocName_HUE");
            }if (parentContextMap.containsKey("outJsonDocName_TER")) {
                context.outJsonDocName_TER = (String) parentContextMap.get("outJsonDocName_TER");
            }if (parentContextMap.containsKey("outJsonDocName_ZGZ")) {
                context.outJsonDocName_ZGZ = (String) parentContextMap.get("outJsonDocName_ZGZ");
            }if (parentContextMap.containsKey("outXlsDocName_HUE")) {
                context.outXlsDocName_HUE = (String) parentContextMap.get("outXlsDocName_HUE");
            }if (parentContextMap.containsKey("outXlsDocName_TER")) {
                context.outXlsDocName_TER = (String) parentContextMap.get("outXlsDocName_TER");
            }if (parentContextMap.containsKey("outXlsDocName_ZGZ")) {
                context.outXlsDocName_ZGZ = (String) parentContextMap.get("outXlsDocName_ZGZ");
            }if (parentContextMap.containsKey("outXmlDocName_HUE")) {
                context.outXmlDocName_HUE = (String) parentContextMap.get("outXmlDocName_HUE");
            }if (parentContextMap.containsKey("outXmlDocName_TER")) {
                context.outXmlDocName_TER = (String) parentContextMap.get("outXmlDocName_TER");
            }if (parentContextMap.containsKey("outXmlDocName_ZGZ")) {
                context.outXmlDocName_ZGZ = (String) parentContextMap.get("outXmlDocName_ZGZ");
            }if (parentContextMap.containsKey("outXmlDocRootTag_HUE")) {
                context.outXmlDocRootTag_HUE = (String) parentContextMap.get("outXmlDocRootTag_HUE");
            }if (parentContextMap.containsKey("outXmlDocRootTag_TER")) {
                context.outXmlDocRootTag_TER = (String) parentContextMap.get("outXmlDocRootTag_TER");
            }if (parentContextMap.containsKey("outXmlDocRootTag_ZGZ")) {
                context.outXmlDocRootTag_ZGZ = (String) parentContextMap.get("outXmlDocRootTag_ZGZ");
            }if (parentContextMap.containsKey("outXmlDocRowTag")) {
                context.outXmlDocRowTag = (String) parentContextMap.get("outXmlDocRowTag");
            }if (parentContextMap.containsKey("databaseTableName")) {
                context.databaseTableName = (String) parentContextMap.get("databaseTableName");
            }if (parentContextMap.containsKey("etlConfName")) {
                context.etlConfName = (String) parentContextMap.get("etlConfName");
            }if (parentContextMap.containsKey("etlConfPath")) {
                context.etlConfPath = (String) parentContextMap.get("etlConfPath");
            }if (parentContextMap.containsKey("inOutXlsSheetName")) {
                context.inOutXlsSheetName = (String) parentContextMap.get("inOutXlsSheetName");
            }if (parentContextMap.containsKey("inXlsOriginalDocName")) {
                context.inXlsOriginalDocName = (String) parentContextMap.get("inXlsOriginalDocName");
            }if (parentContextMap.containsKey("inXlsOriginalDocPath")) {
                context.inXlsOriginalDocPath = (String) parentContextMap.get("inXlsOriginalDocPath");
            }if (parentContextMap.containsKey("inXlsUpdateDocName")) {
                context.inXlsUpdateDocName = (String) parentContextMap.get("inXlsUpdateDocName");
            }if (parentContextMap.containsKey("inXlsUpdateDocPath")) {
                context.inXlsUpdateDocPath = (String) parentContextMap.get("inXlsUpdateDocPath");
            }if (parentContextMap.containsKey("outCsvDocName")) {
                context.outCsvDocName = (String) parentContextMap.get("outCsvDocName");
            }if (parentContextMap.containsKey("outDocsPath")) {
                context.outDocsPath = (String) parentContextMap.get("outDocsPath");
            }if (parentContextMap.containsKey("outIcsDocHeaderPropertyProdId")) {
                context.outIcsDocHeaderPropertyProdId = (String) parentContextMap.get("outIcsDocHeaderPropertyProdId");
            }if (parentContextMap.containsKey("outIcsDocName")) {
                context.outIcsDocName = (String) parentContextMap.get("outIcsDocName");
            }if (parentContextMap.containsKey("outJsonDocDataBlock")) {
                context.outJsonDocDataBlock = (String) parentContextMap.get("outJsonDocDataBlock");
            }if (parentContextMap.containsKey("outJsonDocName")) {
                context.outJsonDocName = (String) parentContextMap.get("outJsonDocName");
            }if (parentContextMap.containsKey("outXlsDocName")) {
                context.outXlsDocName = (String) parentContextMap.get("outXlsDocName");
            }if (parentContextMap.containsKey("outXmlDocName")) {
                context.outXmlDocName = (String) parentContextMap.get("outXmlDocName");
            }if (parentContextMap.containsKey("outXmlDocRootTag")) {
                context.outXmlDocRootTag = (String) parentContextMap.get("outXmlDocRootTag");
            }if (parentContextMap.containsKey("provincesToLoad")) {
                context.provincesToLoad = (String) parentContextMap.get("provincesToLoad");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputExcel_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputExcel_1) {
globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

e_tFileInputExcel_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : AOD_GeneraFicherosFestivos");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }




		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     209433 characters generated by Talend Open Studio for Data Integration 
 *     on the 4 de mayo de 2017 13:54:51 CEST
 ************************************************************************************************/